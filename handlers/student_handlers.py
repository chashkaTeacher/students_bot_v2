from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram.constants import ParseMode
from core.database import Database, format_moscow_time
import os
import datetime
import pytz
from datetime import timedelta
from telegram.error import BadRequest
from handlers.common_handlers import handle_start
import logging

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ENTER_PASSWORD = 0
ENTER_DISPLAY_NAME = 1

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
user_settings = {}

temp_data = {}
EDIT_NAME = 1000
EDIT_LINK = 1001

RESCHEDULE_CHOOSE_LESSON, RESCHEDULE_CHOOSE_WEEK, RESCHEDULE_CHOOSE_DAY, RESCHEDULE_CHOOSE_TIME, RESCHEDULE_CONFIRM = range(5)

# –î–æ–±–∞–≤–∏–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–µ–Ω—é
student_menu_labels = {
    'back': {
        'classic': ('üîô', '–ù–∞–∑–∞–¥'),
        'dark': ('üåë', '–ù–∞–∑–∞–¥'),
        'cheese': ('üßÄ', '–ù–∞–∑–∞–¥'),
        'cyber': ('‚ö°', '–ù–∞–∑–∞–¥'),
        'games': ('üéÆ', '–ù–∞–∑–∞–¥ –≤ –ª–æ–±–±–∏'),
        'anime': ('üçµ', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'),
        'jojo': ('üï∫', '–ù–∞–∑–∞–¥ (Muda Muda)'),
    },
    'homework': {
        'classic': ('üìö', '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ'),
        'dark': ('üõ†', '–ó–∞–¥–∞–Ω–∏–µ –∏–∑ –¢–µ–Ω–∏'),
        'cheese': ('üßÄ', '–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ–≥—Ä—ã–∑'),
        'cyber': ('üñ•', '–ö–û–î: –î–æ–º–∞—à–∫–∞'),
        'games': ('üéÆ', '–ñ—É—Ä–Ω–∞–ª –∑–∞–¥–∞–Ω–∏–π'),
        'anime': ('üóæ', '1000 –ª–µ—Ç –±–æ–ª–∏ –≤ –≤–∏–¥–µ –∑–∞–¥–∞—á'),
        'jojo': ('‚òÄÔ∏è', '–ü—É—Ç—å –•–∞–º–æ–Ω–∞'),
    },
    'lesson': {
        'classic': ('üîó', '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—é'),
        'dark': ('üëÅ', '–°–ø–∏—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∞–Ω—Å'),
        'cheese': ('üêæ', '–ü—Ä—ã–≥–Ω—É—Ç—å –≤ —É—Ä–æ–∫'),
        'cyber': ('üõ∞', '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è [LIVE]'),
        'games': ('üïπ', '–ó–∞—Ä–µ–≥–∞—Ç—å –∫–∞—Ç–∫—É'),
        'anime': ('üìû', '–ó–≤–æ–Ω–æ–∫ —Å–µ–Ω—Å–µ—é'),
        'jojo': ('üåà', '–ù–∞—á–∞—Ç—å –±–∏–∑–∞—Ä–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ'),
    },
    'notes': {
        'classic': ('üìù', '–ö–æ–Ω—Å–ø–µ–∫—Ç—ã'),
        'dark': ('üìú', '–°–≤–∏—Ç–∫–∏ –ó–Ω–∞–Ω–∏–π'),
        'cheese': ('üíú', '–®–ø–∞—Ä–≥–∞–ª–∫–∏'),
        'cyber': ('üìÅ', '–õ–æ–≥–∏'),
        'games': ('üìñ', '–õ–æ—Ä–æ–≤–µ–¥–µ–Ω–∏–µ'),
        'anime': ('üìì', '–•—Ä–æ–Ω–∏–∫–∏'),
        'jojo': ('üìñ', "Heaven's Door"),
    },
    'roadmap': {
        'classic': ('üó∫Ô∏è', '–†–æ–∞–¥–º–∞–ø'),
        'dark': ('‚ùÑÔ∏è', '–®–∞–≥–∏ –≤–æ –¢—å–º–µ'),
        'cheese': ('üßÄ', '–°—ã—Ä–Ω–∞—è —Ç—Ä–æ–ø–∞'),
        'cyber': ('üõ∞', '–ü—Ä–æ—Ç–æ–∫–æ–ª –∫—É—Ä—Å–∞'),
        'games': ('üíé', '–ì—Ä–∏–Ω–¥'),
        'anime': ('üó∫Ô∏è', '–ü—É—Ç—å –≥–µ—Ä–æ—è'),
        'jojo': ('‚è≥', 'To Be Continued'),
    },
    'schedule': {
        'classic': ('üìÖ', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'),
        'dark': ('‚è≥', '–ß–∞—Å—ã –°—É–¥—å–±—ã'),
        'cheese': ('üìÖ', '–°—ã—Ä–∏—Å–∞–Ω–∏–µ'),
        'cyber': ('‚è±', '–¢–∞–π–º–ª–∞–π–Ω'),
        'games': ('üé≤', '–ò–≤–µ–Ω—Ç—ã'),
        'anime': ('üçµ', '–£—á—ë–±–∞ –∏ —á–∞–π'),
        'jojo': ('üï∞', 'Made in Heaven'),
    },
    'settings': {
        'classic': ('‚öôÔ∏è', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'),
        'dark': ('üõ°', '–ì–ª—É–±–∏–Ω—ã –°–∏—Å—Ç–µ–º—ã'),
        'cheese': ('üê±', '–ü–∞–Ω–µ–ª—å –º—ã—à–ª–µ–Ω–∏—è'),
        'cyber': ('‚öôÔ∏è', '–°–∏—Å—Ç–µ–º–∞ ‚ö°'),
        'games': ('üõ†', '–ú–µ–Ω—é –±–∏–ª–¥–æ–≤'),
        'anime': ('ü§ñ', '–ú–µ–Ω—é –ü–∏–ª–æ—Ç–∞ EVA'),
        'jojo': ('üè¢', '–®—Ç–∞–± —Ñ–æ–Ω–¥–∞ –°–ø–∏–¥–≤–∞–≥–æ–Ω–∞'),
    },
    'notifications': {
        'classic': ('üîî', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
        'dark': ('üßÉ', '–ó–æ–≤ –ë–µ–∑–¥–Ω—ã'),
        'cheese': ('üßÄ', '–ü–∏—â–∞–ª–∫–∏'),
        'cyber': ('‚ö°', '–°–∏–≥–Ω–∞–ª—ã'),
        'games': ('üìú', '–ö–≤–µ—Å—Ç—ã'),
        'anime': ('üò∫', '–ù—è!'),
        'jojo': ('üí•', 'ORA! Alerts'),
    },
}

# –ï–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ç–µ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –º–µ–Ω—é
THEME_EMOJIS = {
    "classic": {"homework": "üìö", "lesson": "üîó", "notes": "üìù", "schedule": "üìÖ", "settings": "‚öôÔ∏è", "roadmap": "üó∫Ô∏è", "notifications": "üîî"},
    "dark": {"homework": "üõ†", "lesson": "üëÅ", "notes": "üìú", "schedule": "‚è≥", "settings": "üõ°", "roadmap": "‚ùÑÔ∏è", "notifications": "üßÉ"},
    "cheese": {"homework": "üßÄ", "lesson": "üêæ", "notes": "üíú", "schedule": "üìÖ", "settings": "üê±", "roadmap": "üßÄ", "notifications": "üßÄ"},
    "cyber": {"homework": "üñ•", "lesson": "üõ∞", "notes": "üìÅ", "schedule": "‚è±", "settings": "‚öôÔ∏è", "roadmap": "üõ∞", "notifications": "‚ö°"}
}
THEME_NAMES = {
    "classic": {
        "homework": "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ",
        "lesson": "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—é", 
        "notes": "–ö–æ–Ω—Å–ø–µ–∫—Ç—ã",
        "schedule": "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
        "settings": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        "roadmap": "–†–æ–∞–¥–º–∞–ø",
        "notifications": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    },
    "dark": {
        "homework": "–ó–∞–¥–∞–Ω–∏–µ –∏–∑ –¢–µ–Ω–∏",
        "lesson": "–°–ø–∏—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–∞–Ω—Å",
        "notes": "–°–≤–∏—Ç–∫–∏ –ó–Ω–∞–Ω–∏–π", 
        "schedule": "–ß–∞—Å—ã –°—É–¥—å–±—ã",
        "settings": "–ì–ª—É–±–∏–Ω—ã –°–∏—Å—Ç–µ–º—ã",
        "roadmap": "–®–∞–≥–∏ –≤–æ –¢—å–º–µ",
        "notifications": "–ó–æ–≤ –ë–µ–∑–¥–Ω—ã"
    },
    "cheese": {
        "homework": "–ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ–≥—Ä—ã–∑",
        "lesson": "–ü—Ä—ã–≥–Ω—É—Ç—å –≤ —É—Ä–æ–∫",
        "notes": "–®–ø–∞—Ä–≥–∞–ª–∫–∏",
        "schedule": "–°—ã—Ä–∏—Å–∞–Ω–∏–µ", 
        "settings": "–ü–∞–Ω–µ–ª—å –º—ã—à–ª–µ–Ω–∏—è",
        "roadmap": "–°—ã—Ä–Ω–∞—è —Ç—Ä–æ–ø–∞",
        "notifications": "–ü–∏—â–∞–ª–∫–∏"
    },
    "cyber": {
        "homework": "–ö–û–î: –î–æ–º–∞—à–∫–∞",
        "lesson": "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è [LIVE]",
        "notes": "–õ–æ–≥–∏",
        "schedule": "–¢–∞–π–º–ª–∞–π–Ω",
        "settings": "–°–∏—Å—Ç–µ–º–∞ ‚ö°",
        "roadmap": "–ü—Ä–æ—Ç–æ–∫–æ–ª –∫—É—Ä—Å–∞",
        "notifications": "–°–∏–≥–Ω–∞–ª—ã"
    },
    "games": {
        "homework": "–ñ—É—Ä–Ω–∞–ª –∑–∞–¥–∞–Ω–∏–π",
        "lesson": "–ó–∞—Ä–µ–≥–∞—Ç—å –∫–∞—Ç–∫—É",
        "notes": "–õ–æ—Ä–æ–≤–µ–¥–µ–Ω–∏–µ",
        "schedule": "–ò–≤–µ–Ω—Ç—ã",
        "settings": "–ú–µ–Ω—é –±–∏–ª–¥–æ–≤",
        "roadmap": "–ì—Ä–∏–Ω–¥",
        "notifications": "–ö–≤–µ—Å—Ç—ã"
    },
    "anime": {
        "homework": "1000 –ª–µ—Ç –±–æ–ª–∏ –≤ –≤–∏–¥–µ –∑–∞–¥–∞—á",
        "lesson": "–ó–≤–æ–Ω–æ–∫ —Å–µ–Ω—Å–µ—é",
        "notes": "–•—Ä–æ–Ω–∏–∫–∏",
        "schedule": "–£—á—ë–±–∞ –∏ —á–∞–π",
        "settings": "–ú–µ–Ω—é –ü–∏–ª–æ—Ç–∞ EVA",
        "roadmap": "–ü—É—Ç—å –≥–µ—Ä–æ—è",
        "notifications": "–ù—è!"
    },
    "jojo": {
        "homework": "–ü—É—Ç—å –•–∞–º–æ–Ω–∞",
        "lesson": "–ù–∞—á–∞—Ç—å –±–∏–∑–∞—Ä–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ",
        "notes": "Heaven's Door",
        "schedule": "Made in Heaven",
        "settings": "–®—Ç–∞–± —Ñ–æ–Ω–¥–∞ –°–ø–∏–¥–≤–∞–≥–æ–Ω–∞",
        "roadmap": "To Be Continued",
        "notifications": "ORA! Alerts"
    }
}
THEME_AVATAR_NAMES = {
    "classic": {"title": "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä–∫—É:", "back": "–ù–∞–∑–∞–¥"},
    "dark": {"title": "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä:", "back": "–ù–∞–∑–∞–¥"},
    "cheese": {"title": "–í—ã–±–µ—Ä–∏—Ç–µ —Å—ã—Ä–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É:", "back": "–ù–∞–∑–∞–¥"},
    "cyber": {"title": "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä –ø—Ä–æ—Ñ–∏–ª—è:", "back": "–ù–∞–∑–∞–¥"}
}
THEME_THEME_NAMES = {
    "classic": {"title": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:", "back": "–ù–∞–∑–∞–¥"},
    "dark": {"title": "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:", "back": "–ù–∞–∑–∞–¥"},
    "cheese": {"title": "–í—ã–±–µ—Ä–∏—Ç–µ —Å—ã—Ä–Ω—É—é —Ç–µ–º—É:", "back": "–ù–∞–∑–∞–¥"},
    "cyber": {"title": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:", "back": "–ù–∞–∑–∞–¥"},
    "games": {"title": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–π–º–µ—Ä—Å–∫—É—é —Ç–µ–º—É:", "back": "–ù–∞–∑–∞–¥ –≤ –ª–æ–±–±–∏"},
    "anime": {"title": "–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–µ-—Ç–µ–º—É:", "back": "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"},
    "jojo": {"title": "–í—ã–±–µ—Ä–∏—Ç–µ Jojo-—Ç–µ–º—É:", "back": "–ù–∞–∑–∞–¥ (Muda Muda)"},
}

THEME_SETTINGS_NAMES = {
    "classic": {
        "personalization": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è",
        "old_homework_show": "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è",
        "old_homework_hide": "–°–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è",
        "feedback": "–§–∏–¥–±–µ–∫",
        "reset": "–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        "back": "–ù–∞–∑–∞–¥",
        "title": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    },
    "dark": {
        "personalization": "–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è",
        "old_homework_show": "–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∞—Ä—Ö–∏–≤",
        "old_homework_hide": "–°–∫—Ä—ã—Ç—å –∞—Ä—Ö–∏–≤",
        "feedback": "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å",
        "reset": "–°–±—Ä–æ—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
        "back": "–ù–∞–∑–∞–¥",
        "title": "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã"
    },
    "cheese": {
        "personalization": "–°—ã—Ä–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è",
        "old_homework_show": "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ —Å—ã—Ä—ã",
        "old_homework_hide": "–°–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—ã–µ —Å—ã—Ä—ã",
        "feedback": "–°—ã—Ä–Ω—ã–π —Ñ–∏–¥–±–µ–∫",
        "reset": "–°–±—Ä–æ—Å–∏—Ç—å —Å—ã—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        "back": "–ù–∞–∑–∞–¥",
        "title": "–°—ã—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    },
    "cyber": {
        "personalization": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è",
        "old_homework_show": "–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
        "old_homework_hide": "–°–∫—Ä—ã—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
        "feedback": "–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö",
        "reset": "–°–±—Ä–æ—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
        "back": "–ù–∞–∑–∞–¥",
        "title": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
    }
}

THEME_PERSONALIZATION_NAMES = {
    "classic": {
        "change_name": "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
        "choose_avatar": "–í—ã–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É",
        "choose_theme": "–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É",
        "back": "–ù–∞–∑–∞–¥",
        "title": "–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è"
    },
    "dark": {
        "change_name": "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º",
        "choose_avatar": "–í—ã–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä",
        "choose_theme": "–°–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å",
        "back": "–ù–∞–∑–∞–¥",
        "title": "–ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è"
    },
    "cheese": {
        "change_name": "–ò–∑–º–µ–Ω–∏—Ç—å —Å—ã—Ä–Ω–æ–µ –∏–º—è",
        "choose_avatar": "–í—ã–±—Ä–∞—Ç—å —Å—ã—Ä–Ω—É—é –∞–≤–∞—Ç–∞—Ä–∫—É",
        "choose_theme": "–°–º–µ–Ω–∏—Ç—å —Å—ã—Ä–Ω—É—é —Ç–µ–º—É",
        "back": "–ù–∞–∑–∞–¥",
        "title": "–°—ã—Ä–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è"
    },
    "cyber": {
        "change_name": "–ò–∑–º–µ–Ω–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä",
        "choose_avatar": "–í—ã–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –ø—Ä–æ—Ñ–∏–ª—è",
        "choose_theme": "–°–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
        "back": "–ù–∞–∑–∞–¥",
        "title": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è"
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
def themed_button(label_key, theme, callback_data):
    emoji, text = student_menu_labels[label_key][theme]
    return InlineKeyboardButton(f"{emoji} {text}", callback_data=callback_data)

def require_student(func):
    async def wrapper(update, context, *args, **kwargs):
        db = context.bot_data['db']
        user_id = update.effective_user.id
        student = db.get_student_by_telegram_id(user_id)
        if not student:
            if update.callback_query:
                await update.callback_query.answer()
                await update.callback_query.edit_message_text(
                    text="‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
                )
            else:
                await update.message.reply_text("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            # –õ–ï–ù–ò–í–´–ô –ò–ú–ü–û–†–¢, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            await handle_start(update, context)
            return ConversationHandler.END
        return await func(update, context, *args, **kwargs)
    return wrapper

# –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞
@require_student
async def student_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    user_id = update.effective_user.id
    student = context.bot_data['db'].get_student_by_telegram_id(user_id)
    db = context.bot_data['db']
    unread_count = len(db.get_notifications(student.id, only_unread=True)) if student else 0
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    display_name = student.display_name or student.name
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∏ —Ç–µ–º—É
    avatar_emoji = student.avatar_emoji or "üëã"
    greeting = f"{avatar_emoji} –ü—Ä–∏–≤–µ—Ç, {display_name}!"
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ —ç–º–æ–¥–∑–∏ –≤ –º–µ–Ω—é
    theme = student.theme or "classic"
    
    emojis = THEME_EMOJIS.get(theme, THEME_EMOJIS["classic"])
    names = THEME_NAMES.get(theme, THEME_NAMES["classic"])
    
    notif_text = f"{emojis['notifications']} {names['notifications']} ({unread_count})" if unread_count else f"{emojis['notifications']} {names['notifications']}"
    
    if student.exam_type.value == '–®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞':
        keyboard = [
            [InlineKeyboardButton(f"{emojis['homework']} {names['homework']}", callback_data="student_homework")],
            [InlineKeyboardButton(f"{emojis['lesson']} {names['lesson']}", callback_data="student_join_lesson")],
            [InlineKeyboardButton(f"{emojis['notes']} {names['notes']}", callback_data="student_notes")],
            [
                InlineKeyboardButton(f"{emojis['schedule']} {names['schedule']}", callback_data="student_schedule"),
                InlineKeyboardButton(notif_text, callback_data="student_notifications")
            ],
            [InlineKeyboardButton(f"{emojis['settings']} {names['settings']}", callback_data="student_settings")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton(f"{emojis['homework']} {names['homework']}", callback_data="student_homework_menu")],
            [InlineKeyboardButton(f"{emojis['lesson']} {names['lesson']}", callback_data="student_join_lesson")],
            [
                InlineKeyboardButton(f"{emojis['notes']} {names['notes']}", callback_data="student_notes"),
                InlineKeyboardButton(f"{emojis['roadmap']} {names['roadmap']}", callback_data="student_roadmap")
            ],
            [
                InlineKeyboardButton(f"{emojis['schedule']} {names['schedule']}", callback_data="student_schedule"),
                InlineKeyboardButton(notif_text, callback_data="student_notifications")
            ],
            [InlineKeyboardButton(f"{emojis['settings']} {names['settings']}", callback_data="student_settings")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        try:
            msg = await update.callback_query.edit_message_text(
                text=greeting,
                reply_markup=reply_markup
            )
            db.update_student_menu_message_id(student.id, msg.message_id)
        except BadRequest as e:
            if "Message is not modified" in str(e):
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            else:
                raise
    else:
        msg = await update.message.reply_text(
            text=greeting,
            reply_markup=reply_markup
        )
        db.update_student_menu_message_id(student.id, msg.message_id)

@require_student
async def show_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = update.effective_user.id
    student = context.bot_data['db'].get_student_by_telegram_id(user_id)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–Ω–æ–ø–æ–∫
    theme = student.theme or "classic"
    names = THEME_SETTINGS_NAMES.get(theme, THEME_SETTINGS_NAMES["classic"])
    show_old_text = f"üëÅÔ∏è {names['old_homework_hide']}" if student.show_old_homework else f"üëÅÔ∏è {names['old_homework_show']}"
    
    keyboard = [
        [InlineKeyboardButton(f"üé® {names['personalization']}", callback_data="student_personalization")],
        [InlineKeyboardButton(show_old_text, callback_data="student_toggle_old_homework")],
        [InlineKeyboardButton(f"üìù {names['feedback']}", callback_data="student_feedback")],
        [InlineKeyboardButton(f"üîÑ {names['reset']}", callback_data="student_reset_settings")],
        [InlineKeyboardButton(f"üîô {names['back']}", callback_data="student_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text=f"‚öôÔ∏è {names['title']}\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=reply_markup
    )

@require_student
async def show_personalization_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–º–µ–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
    user_id = update.effective_user.id
    student = context.bot_data['db'].get_student_by_telegram_id(user_id)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–Ω–æ–ø–æ–∫
    theme = student.theme or "classic"
    names = THEME_PERSONALIZATION_NAMES.get(theme, THEME_PERSONALIZATION_NAMES["classic"])
    
    keyboard = [
        [InlineKeyboardButton(f"üë§ {names['change_name']}", callback_data="student_change_name")],
        [InlineKeyboardButton(f"ü¶ä {names['choose_avatar']}", callback_data="student_choose_avatar")],
        [InlineKeyboardButton(f"üåà {names['choose_theme']}", callback_data="student_choose_theme")],
        [InlineKeyboardButton(f"üîô {names['back']}", callback_data="student_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        text=f"üé® {names['title']}\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=reply_markup
    )

async def handle_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è"""
    db: Database = context.bot_data['db']
    password = update.message.text
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    student = db.get_student_by_password(password)
    if student:
        # –û–±–Ω–æ–≤–ª—è–µ–º Telegram ID —Å—Ç—É–¥–µ–Ω—Ç–∞
        db.update_student_telegram_id(student.id, user_id)
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —É–≤–∏–¥–µ–ª –µ–≥–æ
        student = db.get_student_by_telegram_id(user_id)
        from handlers.student_handlers import student_menu
        await student_menu(update, context)
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return ENTER_PASSWORD

@require_student
async def handle_student_actions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None | int:
    query = update.callback_query
    if query.data == "student_feedback":
        msg = await query.edit_message_text(
            "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ, –∑–∞–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ –±–∞–≥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_settings")]
            ])
        )
        context.user_data['awaiting_feedback'] = True
        context.user_data['feedback_menu_msg_id'] = msg.message_id
        return
    try:
        await query.answer()
    except Exception as e:
        pass
    db: Database = context.bot_data['db']
    user_id = query.from_user.id
    student = db.get_student_by_telegram_id(user_id)
    


    if query.data == "student_personalization":
        await show_personalization_menu(update, context)
        return
    elif query.data == "student_choose_avatar":
        await show_avatar_menu(update, context)
        return
    elif query.data == "student_choose_theme":
        await show_theme_menu(update, context)
        return
    elif query.data.startswith("set_avatar_"):
        emoji = query.data.replace("set_avatar_", "")
        db.set_student_avatar(student.id, emoji)
        await query.edit_message_text(
            f"–ê–≤–∞—Ç–∞—Ä–∫–∞ {emoji} —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞!", 
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="student_personalization")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="student_back")]
            ])
        )
        return
    elif query.data.startswith("set_theme_"):
        theme = query.data.replace("set_theme_", "")
        db.set_student_theme(student.id, theme)
        theme_names = THEME_THEME_NAMES.get(theme, THEME_THEME_NAMES["classic"])
        await query.edit_message_text(
            f"–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è {theme_names.get('title', theme)} —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞!", 
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è", callback_data="student_personalization")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="student_back")]
            ])
        )
        return
    elif query.data == "student_homework":
        await show_student_homework_menu(update, context, student, page=int(context.user_data.get('homework_page', 0)))
        return
    elif query.data.startswith("student_hw_file_"):
        hw_id = int(query.data.split("_")[-1])
        hw = db.get_homework_by_id(hw_id)
        if not hw:
            await query.message.reply_text(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (id={hw_id})")
        elif not hw.file_path:
            await query.message.reply_text(f"‚ùå –£ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç —Ñ–∞–π–ª–∞ (id={hw_id})")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
            file_path = os.path.join(os.getcwd(), hw.file_path)
            if not os.path.exists(file_path):
                await query.message.reply_text(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {hw.file_path}")
            else:
                # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –º–µ–Ω—é (–∑–∞–º–µ–Ω—è–µ–º –Ω–∞ "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞...")
                try:
                    await query.edit_message_text(text="‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞...")
                except Exception as e:
                    if "Message is not modified" not in str(e):
                        raise
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                try:
                    await query.message.reply_document(document=file_path, caption=f"üìù {hw.title}")
                except Exception as e:
                    await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
                # –ü–æ—Å–ª–µ —Ñ–∞–π–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                buttons = [[InlineKeyboardButton("–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ", url=hw.link)]]
                if hw and hw.file_path:
                    buttons.append([InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"student_hw_file_{hw_id}")])
                buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_homework")])
                await query.message.reply_text(
                    text=f"üìù <b>{hw.title}</b>",
                    reply_markup=InlineKeyboardMarkup(buttons),
                    parse_mode=ParseMode.HTML
                )
        return
    elif query.data.startswith("student_hw_"):
        hw_id = int(query.data.split("_")[-1])
        hw = db.get_homework_by_id(hw_id)
        if not hw:
            await query.edit_message_text(
                text="‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_homework")]])
            )
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É —ç–∫–∑–∞–º–µ–Ω–∞
        exam_emoji = {
            '–û–ì–≠': 'üìù',
            '–ï–ì–≠': 'üìö',
            '–®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞': 'üè´',
        }
        emoji = exam_emoji.get(getattr(hw, 'exam_type', ''), 'üìñ')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        exam_type = getattr(hw, 'exam_type', '')
        exam_info = f"üìù –≠–∫–∑–∞–º–µ–Ω: {exam_type.value}\n" if exam_type else ""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º
        homeworks_data = db.get_homeworks_for_student_with_filter(student.id, show_old=True)
        is_current = False
        if homeworks_data:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–¥–∞–Ω–∏—è (1, 2, 3, 11, 23...)
            homeworks_data.sort(key=lambda x: x[0].get_task_number())
            # –ê–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–¥–∞–Ω–∏–µ —Å —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º –Ω–æ–º–µ—Ä–æ–º
            is_current = homeworks_data[-1][0].id == hw_id
        
        # –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
        status_text = "üÜï –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ" if is_current else "ÔøΩÔøΩ –ü—Ä–æ–π–¥–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
        
        message_text = (
            f"{emoji} <b>{hw.title}</b>\n"
            f"{exam_info}"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"{status_text}\n"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Å —ç–º–æ–¥–∑–∏
        buttons = [[InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –æ–Ω–ª–∞–π–Ω", url=hw.link)]]
        if hw.file_path:
            buttons.append([InlineKeyboardButton("üìé –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"student_hw_file_{hw_id}")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_homework")])
        
        try:
            await query.edit_message_text(
                text=message_text,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            if "Message is not modified" not in str(e):
                raise
        return
    elif query.data == "student_notes":
        await show_student_notes_menu(update, context, student, page=int(context.user_data.get('notes_page', 0)))
        return
    elif query.data == "student_notes_prev":
        page = int(context.user_data.get('notes_page', 0))
        if page > 0:
            await show_student_notes_menu(update, context, student, page=page-1)
        else:
            await query.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        return
    elif query.data == "student_notes_next":
        student_notes = db.get_notes_for_student(student.id)
        page = int(context.user_data.get('notes_page', 0))
        per_page = 6  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ 6, –∫–∞–∫ –≤ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        total = len(student_notes)
        max_page = (total + per_page - 1) // per_page - 1
        if page < max_page:
            await show_student_notes_menu(update, context, student, page=page+1)
        else:
            await query.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        return
    elif query.data == "student_schedule":
        await show_student_schedule_menu(update, context, student)
    elif query.data == "student_reschedule":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–Ω—è—Ç–∏—è
        await student_reschedule_menu(update, context)
        return RESCHEDULE_CHOOSE_LESSON
    elif query.data.startswith("reschedule_lesson_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
        await student_reschedule_start(update, context)
        return RESCHEDULE_CHOOSE_WEEK
    elif query.data.startswith("reschedule_week_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏
        await student_reschedule_choose_week(update, context)
        return RESCHEDULE_CHOOSE_DAY
    elif query.data.startswith("reschedule_day_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è
        await student_reschedule_choose_day(update, context)
        return RESCHEDULE_CHOOSE_TIME
    elif query.data.startswith("reschedule_time_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        await student_reschedule_choose_time(update, context)
        return RESCHEDULE_CHOOSE_TIME
    elif query.data == "reschedule_confirm":
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await student_reschedule_confirm(update, context)
        return ConversationHandler.END
    elif query.data == "student_menu":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞
        await student_menu(update, context)
        return
    elif query.data == "student_join_lesson":
        if student and student.lesson_link:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–Ω—è—Ç–∏–∏
            next_lesson = db.get_next_lesson(student.id)
            
            if next_lesson:
                next_date = format_moscow_time(next_lesson['date'], '%d.%m.%Y')
                lesson_text = (
                    f"üìÖ <b>–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ</b>\n\n"
                    f"üóìÔ∏è –î–∞—Ç–∞: {next_date}\n"
                    f"üìÖ –î–µ–Ω—å: {next_lesson['day_name']}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {next_lesson['time']}\n"
                    f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {next_lesson['duration']} –º–∏–Ω—É—Ç\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—é:"
                )
            else:
                lesson_text = (
                    f"üìÖ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∑–∞–Ω—è—Ç–∏—é</b>\n\n"
                    f"üóìÔ∏è –î–∞—Ç–∞: —É—Ç–æ—á–Ω—è–µ—Ç—Å—è\n"
                    f"‚è∞ –í—Ä–µ–º—è: —É—Ç–æ—á–Ω—è–µ—Ç—Å—è\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—é:"
                )
            
            await query.edit_message_text(
                text=lesson_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üé• –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—é", url=student.lesson_link)],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]
                ]),
                parse_mode=ParseMode.HTML
            )
        else:
            await query.edit_message_text(
                text="‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")
                ]])
            )
    elif query.data == "student_current_variant":
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ —ç–∫–∑–∞–º–µ–Ω—É —É—á–µ–Ω–∏–∫–∞
        if not student or not student.exam_type:
            await query.edit_message_text(
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
            )
            return
        variant = db.get_latest_variant(student.exam_type)
        if not variant:
            await query.edit_message_text(
                text="üìÑ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
            )
            return
        # –û—Ñ–æ—Ä–º–ª—è–µ–º –¥–∞—Ç—É –≤—ã–¥–∞—á–∏
        issued_date = format_moscow_time(variant.created_at, '%d.%m.%Y') if variant.created_at else "-"
        # –í—ã—á–∏—Å–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        dt = variant.created_at or datetime.datetime.now()
        days_ahead = 0 if dt.weekday() == 0 else 7 - dt.weekday()
        next_monday = dt + datetime.timedelta(days=days_ahead)
        deadline = format_moscow_time(next_monday, '%d.%m.%Y')
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            "üìÑ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç</b>\n\n"
            f"üóìÔ∏è –í—ã–¥–∞–Ω: {issued_date}\n"
            f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline} (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî <a href=\"https://t.me/ChashkaDurashka\">–ø–∏—à–∏ –°–∞—à–µ</a>."
        )
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç", url=variant.link)],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]
            ]),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=False
        )
        return
    elif query.data == "student_settings":
        await show_settings_menu(update, context)
    elif query.data == "student_change_name":
        await query.edit_message_text(
            text="üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="student_back_to_settings")
            ]])
        )
        return ENTER_DISPLAY_NAME
    elif query.data == "student_reset_settings":
        if student:
            context.bot_data['db'].reset_student_settings(student.id)
            await query.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!")
        await student_menu(update, context)
    elif query.data == "student_toggle_old_homework":
        if student:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            new_setting = not student.show_old_homework
            context.bot_data['db'].update_student_show_old_homework(student.id, new_setting)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await show_settings_menu(update, context)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            status_text = "–≤–∫–ª—é—á–µ–Ω" if new_setting else "–æ—Ç–∫–ª—é—á–µ–Ω"
            await query.answer(f"‚úÖ –ü–æ–∫–∞–∑ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π {status_text}!")
        return
    elif query.data == "student_back_to_settings":
        await show_settings_menu(update, context)
    elif query.data == "student_back":
        await student_menu(update, context)
    elif query.data == "student_notifications":
        # –°–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        context.user_data['notif_page'] = 0
        notifications = db.get_notifications(student.id)
        if not notifications:
            await query.edit_message_text(
                text="üîî –ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
            )
            return
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        page = int(context.user_data.get('notif_page', 0))
        per_page = 5
        total = len(notifications)
        max_page = (total + per_page - 1) // per_page - 1
        page_notifications = notifications[page * per_page:min(page * per_page + per_page, total)]
        notif_texts = []
        for i, notif in enumerate(page_notifications, 1):
            status = "üÜï " if not notif.is_read else "üìã "
            dt = format_moscow_time(notif.created_at)
            # –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ —Å —ç–º–æ–¥–∑–∏
            if notif.type == 'homework':
                notif_type = "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
            elif notif.type == 'variant':
                notif_type = "üìÑ –í–∞—Ä–∏–∞–Ω—Ç"
            elif notif.type == 'schedule':
                notif_type = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
            else:
                notif_type = "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            text = f"<b>{status}{notif_type}</b>\n"
            text += f"üìÖ <i>{dt}</i>\n\n"
            text += f"üìù {notif.text}"
            
            if notif.link:
                text += f"\nüîó <a href='{notif.link}'>–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É</a>"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(page_notifications):
                text += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            
            notif_texts.append(text)
        
        text = "\n\n".join(notif_texts)
        db.mark_notifications_read(student.id)
        buttons = []
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if max_page > 0:
            nav_row = []
            if page > 0:
                nav_row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="notif_prev"))
            nav_row.append(InlineKeyboardButton(f"{page+1}/{max_page+1}", callback_data="noop"))
            if page < max_page:
                nav_row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="notif_next"))
            buttons.append(nav_row)
        
        buttons.append([InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="notif_clear")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")])
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        header = f"üîî <b>–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        header += f"üìä –í—Å–µ–≥–æ: {total}\n"
        header += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        
        await query.edit_message_text(
            text=header + text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return
    elif query.data == "notif_next":
        context.user_data['notif_page'] = context.user_data.get('notif_page', 0) + 1
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        notifications = db.get_notifications(student.id)
        if not notifications:
            await query.edit_message_text(
                text="üîî –ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
            )
            return
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        page = int(context.user_data.get('notif_page', 0))
        per_page = 5
        total = len(notifications)
        max_page = (total + per_page - 1) // per_page - 1
        page_notifications = notifications[page * per_page:min(page * per_page + per_page, total)]
        notif_texts = []
        for i, notif in enumerate(page_notifications, 1):
            status = "üÜï " if not notif.is_read else "üìã "
            dt = format_moscow_time(notif.created_at)
            # –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ —Å —ç–º–æ–¥–∑–∏
            if notif.type == 'homework':
                notif_type = "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
            elif notif.type == 'variant':
                notif_type = "üìÑ –í–∞—Ä–∏–∞–Ω—Ç"
            elif notif.type == 'schedule':
                notif_type = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
            else:
                notif_type = "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            text = f"<b>{status}{notif_type}</b>\n"
            text += f"üìÖ <i>{dt}</i>\n\n"
            text += f"üìù {notif.text}"
            
            if notif.link:
                text += f"\nüîó <a href='{notif.link}'>–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É</a>"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(page_notifications):
                text += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            
            notif_texts.append(text)
        
        text = "\n\n".join(notif_texts)
        db.mark_notifications_read(student.id)
        buttons = []
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if max_page > 0:
            nav_row = []
            if page > 0:
                nav_row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="notif_prev"))
            nav_row.append(InlineKeyboardButton(f"{page+1}/{max_page+1}", callback_data="noop"))
            if page < max_page:
                nav_row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="notif_next"))
            buttons.append(nav_row)
        
        buttons.append([InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="notif_clear")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")])
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        header = f"üîî <b>–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        header += f"üìä –í—Å–µ–≥–æ: {total}\n"
        header += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        
        await query.edit_message_text(
            text=header + text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return
    elif query.data == "notif_prev":
        context.user_data['notif_page'] = max(0, context.user_data.get('notif_page', 0) - 1)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        notifications = db.get_notifications(student.id)
        if not notifications:
            await query.edit_message_text(
                text="üîî –ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
            )
            return
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        page = int(context.user_data.get('notif_page', 0))
        per_page = 5
        total = len(notifications)
        max_page = (total + per_page - 1) // per_page - 1
        page_notifications = notifications[page * per_page:min(page * per_page + per_page, total)]
        notif_texts = []
        for i, notif in enumerate(page_notifications, 1):
            status = "üÜï " if not notif.is_read else "üìã "
            dt = format_moscow_time(notif.created_at)
            # –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ —Å —ç–º–æ–¥–∑–∏
            if notif.type == 'homework':
                notif_type = "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
            elif notif.type == 'variant':
                notif_type = "üìÑ –í–∞—Ä–∏–∞–Ω—Ç"
            elif notif.type == 'schedule':
                notif_type = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
            else:
                notif_type = "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            text = f"<b>{status}{notif_type}</b>\n"
            text += f"üìÖ <i>{dt}</i>\n\n"
            text += f"üìù {notif.text}"
            
            if notif.link:
                text += f"\nüîó <a href='{notif.link}'>–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É</a>"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(page_notifications):
                text += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            
            notif_texts.append(text)
        
        text = "\n\n".join(notif_texts)
        db.mark_notifications_read(student.id)
        buttons = []
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if max_page > 0:
            nav_row = []
            if page > 0:
                nav_row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="notif_prev"))
            nav_row.append(InlineKeyboardButton(f"{page+1}/{max_page+1}", callback_data="noop"))
            if page < max_page:
                nav_row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="notif_next"))
            buttons.append(nav_row)
        
        buttons.append([InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="notif_clear")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")])
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        header = f"üîî <b>–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        header += f"üìä –í—Å–µ–≥–æ: {total}\n"
        header += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        
        await query.edit_message_text(
            text=header + text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return
    elif query.data == "notif_clear":
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –±–∞–∑—ã
        db.clear_notifications(student.id)
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
        push_msgs = db.get_push_messages(student.id)
        for push in push_msgs:
            try:
                await context.bot.delete_message(chat_id=student.telegram_id, message_id=push.message_id)
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
        db.clear_push_messages(student.id)
        context.user_data['notif_page'] = 0
        await query.edit_message_text(
            text="üîî –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
        )
        return
    elif query.data.startswith("student_note_file_"):
        note_id = int(query.data.split("_")[-1])
        note = db.get_note_by_id(note_id)
        if not note:
            await query.message.reply_text(f"‚ùå –ö–æ–Ω—Å–ø–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (id={note_id})")
        elif not note.file_path:
            await query.message.reply_text(f"‚ùå –£ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –Ω–µ—Ç —Ñ–∞–π–ª–∞ (id={note_id})")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
            file_path = os.path.join(os.getcwd(), note.file_path)
            if not os.path.exists(file_path):
                await query.message.reply_text(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {note.file_path}")
            else:
                # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –º–µ–Ω—é (–∑–∞–º–µ–Ω—è–µ–º –Ω–∞ "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞...")
                try:
                    await query.edit_message_text(text="‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞...")
                except Exception as e:
                    if "Message is not modified" not in str(e):
                        raise
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                try:
                    await query.message.reply_document(document=file_path, caption=f"üìö {note.title}")
                except Exception as e:
                    await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
                # –ü–æ—Å–ª–µ —Ñ–∞–π–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                buttons = [[InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –æ–Ω–ª–∞–π–Ω", url=note.link)]]
                if note and note.file_path:
                    buttons.append([InlineKeyboardButton("üìé –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"student_note_file_{note_id}")])
                buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_notes")])
                await query.message.reply_text(
                    text=f"üìö <b>{note.title}</b>",
                    reply_markup=InlineKeyboardMarkup(buttons),
                    parse_mode=ParseMode.HTML
                )
        return
    elif query.data.startswith("student_note_"):
        note_id = int(query.data.split("_")[-1])
        note = db.get_note_by_id(note_id)
        if not note:
            await query.edit_message_text(
                text="‚ùå –ö–æ–Ω—Å–ø–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_notes")]])
            )
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É —ç–∫–∑–∞–º–µ–Ω–∞
        exam_emoji = {
            '–û–ì–≠': 'üìù',
            '–ï–ì–≠': 'üìö',
            '–®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞': 'üè´',
        }
        emoji = exam_emoji.get(getattr(note, 'exam_type', ''), 'üìñ')
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        task_number = note.get_task_number()
        task_info = f"#Ô∏è‚É£ –ó–∞–¥–∞–Ω–∏–µ: ‚Ññ{task_number}\n" if task_number != float('inf') else ""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        exam_type = getattr(note, 'exam_type', '')
        exam_info = f"üìù –≠–∫–∑–∞–º–µ–Ω: {exam_type.value}\n" if exam_type else ""
        
        message_text = (
            f"{emoji} <b>{note.title}</b>\n"
            f"{exam_info}"
            f"{task_info}"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ —Å —ç–º–æ–¥–∑–∏
        buttons = [[InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –æ–Ω–ª–∞–π–Ω", url=note.link)]]
        if note.file_path:
            buttons.append([InlineKeyboardButton("üìé –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"student_note_file_{note_id}")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_notes")])
        
        try:
            await query.edit_message_text(
                text=message_text,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            if "Message is not modified" not in str(e):
                raise
        return
    elif query.data == "student_homework_prev":
        page = int(context.user_data.get('homework_page', 0))
        if page > 0:
            await show_student_homework_menu(update, context, student, page=page-1)
        else:
            await query.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        return
    elif query.data == "student_homework_next":
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –ª–æ–≥–∏–∫–∞ —É–∂–µ –≤ show_student_homework_menu
        page = int(context.user_data.get('homework_page', 0))
        await show_student_homework_menu(update, context, student, page=page+1)
        return
    elif query.data == "student_roadmap":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–∞–¥–º–∞–ø –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—á–µ–Ω–∏–∫–∞
        await show_student_roadmap(update, context, student, page=int(context.user_data.get('roadmap_page', 0)))
        return
    elif query.data.startswith("roadmap_page_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ä–æ–∞–¥–º–∞–ø–∞
        page = int(query.data.split("_")[-1])
        context.user_data['roadmap_page'] = page
        await show_student_roadmap(update, context, student, page=page)
        return
    elif query.data == "student_homework_menu":
        buttons = [
            [InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data="student_homework")],
            [InlineKeyboardButton("üìÑ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="student_current_variant")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]
        ]
        await query.edit_message_text(
            text="üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return

@require_student
async def handle_display_name_change(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏"""
    user_id = update.effective_user.id
    new_name = update.message.text
    
    student = context.bot_data['db'].get_student_by_telegram_id(user_id)
    if student:
        context.bot_data['db'].update_student_settings(student.id, display_name=new_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_message = await update.message.reply_text("‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        await student_menu(update, context)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        import asyncio
        await asyncio.sleep(2)
        await confirm_message.delete()
    
    return ConversationHandler.END

@require_student
async def show_student_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞–º–∏"""
    query = update.callback_query
    
    keyboard = [
        [
            InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞", callback_data="student_add"),
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤", callback_data="student_list")
        ],
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="student_edit"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="student_delete")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]

@require_student
async def handle_student_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        pass
    
    action, student_id = query.data.split("_")[1:]  # student_edit_123 -> ["student", "edit", "123"]
    
    if action == "edit":
        keyboard = [
            [
                InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"student_edit_name_{student_id}"),
                InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"student_edit_link_{student_id}")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]

@require_student
async def handle_student_edit_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        pass
    
    parts = query.data.split("_")  # student_edit_link_123 -> ["student", "edit", "link", "123"]
    action = parts[2]
    student_id = int(parts[3])
    
    user_id = update.effective_user.id
    if user_id not in temp_data:
        temp_data[user_id] = {}
    temp_data[user_id]["student_id"] = student_id
    
    db = Database()
    student = db.get_student_by_id(student_id)
    
    if action == "link":
        await query.edit_message_text(
            text=f"üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —É—á–µ–Ω–∏–∫–∞:\n"
                 f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {student.lesson_link}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]])
        )
        return EDIT_LINK
    else:  # action == "name"
        await query.edit_message_text(
            text=f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞:\n"
                 f"–¢–µ–∫—É—â–µ–µ –∏–º—è: {student.name}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]])
        )
        return EDIT_NAME

@require_student
async def handle_student_link_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —É—á–µ–Ω–∏–∫–∞"""
    user_id = update.effective_user.id
    if user_id not in temp_data or "student_id" not in temp_data[user_id]:
        await update.message.reply_text(
            text="‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return ConversationHandler.END
    
    student_id = temp_data[user_id]["student_id"]
    new_link = update.message.text
    
    db = Database()
    student = db.get_student_by_id(student_id)
    if not student:
        await update.message.reply_text(
            text="‚ùå –û—à–∏–±–∫–∞: —É—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return ConversationHandler.END
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.update_student_lesson_link(student_id, new_link)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text(
        text=f"‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
             f"üë§ –£—á–µ–Ω–∏–∫: {student.name}\n"
             f"üîó –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {new_link}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
        ]])
    )
    return ConversationHandler.END 

@require_student
async def send_student_menu_by_chat_id(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> None:
    db = context.bot_data['db']
    student = db.get_student_by_telegram_id(chat_id)
    if not student:
        return
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    last_menu_id = db.get_student_menu_message_id(student.id)
    if last_menu_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=last_menu_id)
        except Exception:
            pass
    unread_count = len(db.get_notifications(student.id, only_unread=True))
    display_name = student.display_name or student.name
    avatar_emoji = student.avatar_emoji or "üëã"
    greeting = f"{avatar_emoji} –ü—Ä–∏–≤–µ—Ç, {display_name}!"
    theme = student.theme or "classic"
    emojis = THEME_EMOJIS.get(theme, THEME_EMOJIS["classic"])
    names = THEME_NAMES.get(theme, THEME_NAMES["classic"])
    notif_text = f"{emojis['notifications']} {names['notifications']} ({unread_count})" if unread_count else f"{emojis['notifications']} {names['notifications']}"
    if student.exam_type.value == '–®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞':
        keyboard = [
            [InlineKeyboardButton(f"{emojis['homework']} {names['homework']}", callback_data="student_homework")],
            [InlineKeyboardButton(f"{emojis['lesson']} {names['lesson']}", callback_data="student_join_lesson")],
            [InlineKeyboardButton(f"{emojis['notes']} {names['notes']}", callback_data="student_notes")],
            [
                InlineKeyboardButton(f"{emojis['schedule']} {names['schedule']}", callback_data="student_schedule"),
                InlineKeyboardButton(notif_text, callback_data="student_notifications")
            ],
            [InlineKeyboardButton(f"{emojis['settings']} {names['settings']}", callback_data="student_settings")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton(f"{emojis['homework']} {names['homework']}", callback_data="student_homework_menu")],
            [InlineKeyboardButton(f"{emojis['lesson']} {names['lesson']}", callback_data="student_join_lesson")],
            [
                InlineKeyboardButton(f"{emojis['notes']} {names['notes']}", callback_data="student_notes"),
                InlineKeyboardButton(f"{emojis['roadmap']} {names['roadmap']}", callback_data="student_roadmap")
            ],
            [
                InlineKeyboardButton(f"{emojis['schedule']} {names['schedule']}", callback_data="student_schedule"),
                InlineKeyboardButton(notif_text, callback_data="student_notifications")
            ],
            [InlineKeyboardButton(f"{emojis['settings']} {names['settings']}", callback_data="student_settings")]
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    msg = await context.bot.send_message(chat_id=chat_id, text=greeting, reply_markup=reply_markup)
    db.update_student_menu_message_id(student.id, msg.message_id)

@require_student
async def show_student_notes_menu(update, context, student, page=0):
    db = context.bot_data['db']
    theme = student.theme or 'classic'
    student_notes = db.get_notes_for_student(student.id)
    if not student_notes:
        await update.callback_query.edit_message_text(
            text=f"{student_menu_labels['notes'][theme][0]} –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤.",
            reply_markup=InlineKeyboardMarkup([[themed_button('back', theme, 'student_back')]])
        )
        return
    per_page = 6  # 3 —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
    total = len(student_notes)
    max_page = (total + per_page - 1) // per_page - 1
    page = max(0, min(page, max_page))
    context.user_data['notes_page'] = page
    start = page * per_page
    end = start + per_page
    notes_on_page = student_notes[start:end]
    keyboard = []
    exam_emoji = {
        '–û–ì–≠': 'üìù',
        '–ï–ì–≠': 'üìö',
        '–®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞': 'üè´',
    }
    for i in range(0, len(notes_on_page), 2):
        row = []
        for j in range(2):
            if i + j < len(notes_on_page):
                note = notes_on_page[i + j]
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É —ç–∫–∑–∞–º–µ–Ω–∞
                emoji = exam_emoji.get(getattr(note, 'exam_type', ''), 'üìñ')
                # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)
                short_descr = note.title[:20] + ('‚Ä¶' if len(note.title) > 20 else '')
                button_text = f"{emoji} {short_descr}"
                row.append(InlineKeyboardButton(button_text, callback_data=f"student_note_{note.id}"))
        if row:
            keyboard.append(row)
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="student_notes_prev"))
    nav_row.append(InlineKeyboardButton(f"{page+1}/{max_page+1}", callback_data="noop"))
    if page < max_page:
        nav_row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="student_notes_next"))
    if len(nav_row) > 1:
        keyboard.append(nav_row)
    keyboard.append([themed_button('back', theme, 'student_back')])
    header = f"{student_menu_labels['notes'][theme][0]} <b>–í–∞—à–∏ {student_menu_labels['notes'][theme][1].lower()}</b>\n"
    header += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    try:
        await update.callback_query.edit_message_text(
            text=header,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    except Exception as e:
        if "Message is not modified" not in str(e):
            raise

@require_student
async def show_student_homework_menu(update, context, student, page=0):
    db = context.bot_data['db']
    exam_type = student.exam_type
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –¥–∞—Ç–∞–º–∏ –≤—ã–¥–∞—á–∏
    homeworks_data = db.get_homeworks_for_student_with_filter(student.id, show_old=True)
    
    if not homeworks_data:
        await update.callback_query.edit_message_text(
            text=f"{student_menu_labels['homework'][student.theme or 'classic'][0]} –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.",
            reply_markup=InlineKeyboardMarkup([[themed_button('back', student.theme or 'classic', 'student_back')]])
        )
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –≤—ã–¥–∞—á–∏ (—Å–∞–º–æ–µ –Ω–æ–≤–æ–µ –ø–µ—Ä–≤—ã–º)
    homeworks_data.sort(key=lambda x: x[1], reverse=True)
    
    # –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Äî —Å–∞–º–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ –¥–∞—Ç–µ
    new_homework, new_assigned_at = homeworks_data[0]
    
    # –°—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è ‚Äî –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ –Ω–æ–º–µ—Ä—É
    old_homeworks_data = homeworks_data[1:]
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É: —Ç–æ–ª—å–∫–æ '–ø—Ä–æ–π–¥–µ–Ω–æ' –∏–ª–∏ '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'
    allowed_statuses = {'completed', '–ü—Ä–æ–π–¥–µ–Ω–æ', 'in_progress', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
    filtered_old_homeworks = []
    for homework, assigned_at in old_homeworks_data:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        status = None
        with db.Session() as session:
            from core.database import StudentHomework
            shw = session.query(StudentHomework).filter_by(student_id=student.id, homework_id=homework.id).order_by(StudentHomework.assigned_at.desc()).first()
            if shw:
                status = shw.status
                logging.warning(f"[STUDENT] –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö: student_id={student.id}, homework_id={homework.id}, status={status}")
        if status and status.strip() in allowed_statuses:
            filtered_old_homeworks.append((homework, assigned_at))
    old_homeworks_data = filtered_old_homeworks
    old_homeworks_data.sort(key=lambda x: x[0].get_task_number())
    
    # –ï—Å–ª–∏ —Å–∫—Ä—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
    if not student.show_old_homework:
        old_homeworks_data = []
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    per_page = 4
    total = len(old_homeworks_data)
    max_page = (total + per_page - 1) // per_page - 1 if total > 0 else 0
    page = max(0, min(page, max_page))
    context.user_data['homework_page'] = page
    start = page * per_page
    end = start + per_page
    homeworks_on_page = old_homeworks_data[start:end]
    
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    for i in range(0, len(homeworks_on_page), 2):
        row = []
        for j in range(2):
            if i + j < len(homeworks_on_page):
                homework, assigned_at = homeworks_on_page[i + j]
                short_title = homework.title[:20] + ('‚Ä¶' if len(homework.title) > 20 else '')
                button_text = f"üìö {short_title}"
                row.append(InlineKeyboardButton(button_text, callback_data=f"student_hw_{homework.id}"))
        if row:
            keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if student.show_old_homework:
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="student_homework_prev"))
        nav_buttons.append(InlineKeyboardButton(f"{page+1}/{max_page+1}", callback_data="noop"))
        if end < total:
            nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="student_homework_next"))
        if nav_buttons:
            keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (–ø–æ—Å–ª–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥)
    if new_homework:
        short_title = new_homework.title[:40] + ('‚Ä¶' if len(new_homework.title) > 40 else '')
        keyboard.append([InlineKeyboardButton(f"üÜï {short_title}", callback_data=f"student_hw_{new_homework.id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header = f"üìö <b>–í–∞—à–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>\n"
    header += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    await update.callback_query.edit_message_text(
        text=header,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

@require_student
async def show_student_roadmap(update, context, student, page=0):
    db = context.bot_data['db']
    theme = student.theme or 'classic'
    exam_type = student.exam_type
    exam_label = '–ï–ì–≠' if exam_type.value == '–ï–ì–≠' else '–û–ì–≠'
    
    # --- –†–æ–∞–¥–º–∞–ø –¥–ª—è –ï–ì–≠ ---
    if exam_type.value == '–ï–ì–≠':
        roadmap = [
            (1, 'üñäÔ∏è'), (4, 'üñäÔ∏è'), (11, 'üñäÔ∏èüíª'), (7, 'üñäÔ∏èüíª'), (10, 'üìù'), (3, 'üìä'), (18, 'üìä'), (22, 'üìä'),
            (9, 'üìäüíª'), ('Python', 'üêç'), (2, 'üêç'), (15, 'üêç'), (6, 'üêç'), (14, 'üêç'), (5, 'üêç'), (12, 'üêç'),
            (8, 'üêç'), (13, 'üêç'), (16, 'üêç'), (23, 'üêç'), ('19-21', 'üñäÔ∏èüíª'), (25, 'üêç'), (27, 'üêç'), (24, 'üêç'), (26, 'üìäüíª')
        ]
        real_statuses = db.get_homework_status_for_student(student.id, exam_type)
        tasks = []
        primary_score = 0
        for num, emoji in roadmap:
            status = real_statuses.get(num)
            if status == 'completed' or status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                status = '–ü—Ä–æ–π–¥–µ–Ω–æ'
            elif status == 'in_progress' or status == '–í –ø—Ä–æ—Ü–µ—Å—Å–µ':
                status = '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'
            else:
                status = '–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ'
            note_line = ''
            if status in ('–ü—Ä–æ–π–¥–µ–Ω–æ', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'):
                notes = db.get_notes_by_exam(exam_type)
                note = next((n for n in notes if n.get_task_number() == num), None)
                if note:
                    note_line = f"‚îî‚îÄ <a href='{note.link}'>–ö–æ–Ω—Å–ø–µ–∫—Ç</a>"
            if num in (26, 27):
                max_score = 2
            elif isinstance(num, int) and 1 <= num <= 25:
                max_score = 1
            else:
                max_score = 0
            if num == 'Python' or num == '19-21':
                title = f"{emoji} {num}"
            else:
                title = f"{emoji} –ó–∞–¥–∞–Ω–∏–µ {num}"
            if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                primary_score += max_score
                status_emoji = '‚úÖ'
            elif status == '–í –ø—Ä–æ—Ü–µ—Å—Å–µ':
                status_emoji = 'üîÑ'
            else:
                status_emoji = '‚ùå'
            status_text = f'{status} {status_emoji}'
            task_block = f"{title}\n"
            if note_line:
                task_block += note_line + "\n"
            task_block += f"‚îî‚îÄ –°—Ç–∞—Ç—É—Å: {status_text}"
            tasks.append(task_block)
        
        primary_to_test = {
            1: 7, 2: 14, 3: 20, 4: 27, 5: 34, 6: 40, 7: 43, 8: 46, 9: 48, 10: 51, 11: 54, 12: 56, 13: 59, 14: 62, 15: 64, 16: 67, 17: 70, 18: 72, 19: 75, 20: 78, 21: 80, 22: 83, 23: 85, 24: 88, 25: 90, 26: 93, 27: 95, 28: 98, 29: 100
        }
        test_score = primary_to_test.get(primary_score, 0)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        per_page = 5
        total_pages = (len(tasks) - 1) // per_page + 1
        start = page * per_page
        end = start + per_page
        page_tasks = tasks[start:end]
        tasks_text = "\n\n".join(page_tasks)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"roadmap_page_{page-1}"))
        nav_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="noop"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"roadmap_page_{page+1}"))
        
        progress_text = (
            f"<b>–†–æ–∞–¥–º–∞–ø –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"<b>üèÖ –ü–µ—Ä–≤–∏—á–Ω—ã–π –±–∞–ª–ª: {primary_score}</b>\n"
            f"<b>üéØ –¢–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–ª: {test_score}</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"{tasks_text}"
        )
        
    # --- –†–æ–∞–¥–º–∞–ø –¥–ª—è –û–ì–≠ ---
    elif exam_type.value == '–û–ì–≠':
        roadmap = [
            (1, 'üñäÔ∏è'), (2, 'üñäÔ∏è'), (4, 'üñäÔ∏è'), (9, 'üñäÔ∏è'), (7, 'üñäÔ∏è'), (8, 'üñäÔ∏è'), (10, 'üñäÔ∏è'), (5, 'üñäÔ∏è'), (3, 'üñäÔ∏è'), (6, 'üñäÔ∏è'),
            (11, 'üìÅ'), (12, 'üìÅ'), ('13.1', 'üóÇÔ∏è'), ('13.2', 'üóÇÔ∏è'), (14, 'üóÇÔ∏è'), (15, 'üêç'), ('Python', 'üêç'), (16, 'üêç')
        ]
        real_statuses = db.get_homework_status_for_student(student.id, exam_type)
        tasks = []
        score = 0
        passed_13 = False
        for num, emoji in roadmap:
            status = real_statuses.get(num)
            if status == 'completed' or status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                status = '–ü—Ä–æ–π–¥–µ–Ω–æ'
            elif status == 'in_progress' or status == '–í –ø—Ä–æ—Ü–µ—Å—Å–µ':
                status = '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'
            else:
                status = '–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ'
            note_line = ''
            if status in ('–ü—Ä–æ–π–¥–µ–Ω–æ', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'):
                notes = db.get_notes_by_exam(exam_type)
                note = next((n for n in notes if n.get_task_number() == num), None)
                if note:
                    note_line = f"‚îî‚îÄ <a href='{note.link}'>–ö–æ–Ω—Å–ø–µ–∫—Ç</a>"
            if num == 'Python':
                title = f"{emoji} Python"
                if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                    score += 2
            elif num in ('13.1', '13.2'):
                title = f"{emoji} –ó–∞–¥–∞–Ω–∏–µ {num}"
                if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                    passed_13 = True
            elif num == 14:
                title = f"{emoji} –ó–∞–¥–∞–Ω–∏–µ {num}"
                if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                    score += 3
            elif num in (15, 16):
                title = f"{emoji} –ó–∞–¥–∞–Ω–∏–µ {num}"
                if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                    score += 2
            else:
                title = f"{emoji} –ó–∞–¥–∞–Ω–∏–µ {num}"
                if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                    score += 1
            if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                status_emoji = '‚úÖ'
            elif status == '–í –ø—Ä–æ—Ü–µ—Å—Å–µ':
                status_emoji = 'üîÑ'
            else:
                status_emoji = '‚ùå'
            status_text = f'{status} {status_emoji}'
            task_block = f"{title}\n"
            if note_line:
                task_block += note_line + "\n"
            task_block += f"‚îî‚îÄ –°—Ç–∞—Ç—É—Å: {status_text}"
            tasks.append(task_block)
        
        if passed_13:
            score += 2
        if score <= 4:
            grade = '2'
        elif score <= 10:
            grade = '3'
        elif score <= 16:
            grade = '4'
        else:
            grade = '5'
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        per_page = 5
        total_pages = (len(tasks) - 1) // per_page + 1
        start = page * per_page
        end = start + per_page
        page_tasks = tasks[start:end]
        tasks_text = "\n\n".join(page_tasks)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"roadmap_page_{page-1}"))
        nav_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="noop"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"roadmap_page_{page+1}"))
        
        progress_text = (
            f"<b>–í–∞—à —Ä–æ–∞–¥–º–∞–ø –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"<b>üèÖ –¢–µ–∫—É—â–∏–π –±–∞–ª–ª: {score}</b>\n"
            f"<b>üìä –û—Ü–µ–Ω–∫–∞: {grade}</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"{tasks_text}"
        )
    else:
        progress_text = "–†–æ–∞–¥–º–∞–ø –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –û–ì–≠ –∏ –ï–ì–≠."
        nav_buttons = []
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    if nav_buttons:
        keyboard.append(nav_buttons)
    keyboard.append([themed_button('back', theme, 'student_back')])
    
    await update.callback_query.edit_message_text(
        text=progress_text,
        parse_mode='HTML',
        disable_web_page_preview=True,
        reply_markup=InlineKeyboardMarkup(keyboard)
    ) 

# --- –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ ---
@require_student
async def student_reschedule_start(update, context):
    query = update.callback_query
    await query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–Ω—è—Ç–∏—è
    context.user_data['reschedule_schedule_id'] = int(query.data.split('_')[-1])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª–∏
    buttons = [
        [InlineKeyboardButton("–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="reschedule_week_0")],
        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="reschedule_week_1")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_reschedule")]
    ]
    
    await query.edit_message_text(
        text="–ù–∞ –∫–∞–∫—É—é –Ω–µ–¥–µ–ª—é –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ?",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return RESCHEDULE_CHOOSE_WEEK

@require_student
async def student_reschedule_choose_week(update, context):
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ schedule_id
    if 'reschedule_schedule_id' not in context.user_data:
        await query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_reschedule")]])
        )
        return ConversationHandler.END
    
    week_offset = int(query.data.split('_')[-1])
    context.user_data['reschedule_week_offset'] = week_offset
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏
    db = context.bot_data['db']
    schedule_id = context.user_data['reschedule_schedule_id']
    schedule = db.get_schedule_by_id(schedule_id)
    lesson_duration = schedule.duration
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏
    today = datetime.datetime.now().date()
    start_of_week = today - timedelta(days=today.weekday()) + timedelta(weeks=week_offset)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days = db.get_available_days_for_week(datetime.datetime.combine(start_of_week, datetime.datetime.min.time()), lesson_duration)
    
    if not days:
        await query.edit_message_text(
            text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_reschedule")]])
        )
        return ConversationHandler.END
    
    buttons = [[InlineKeyboardButton(f"{d['day_name']} {d['date'].strftime('%d.%m.%Y')}", callback_data=f"reschedule_day_{d['date'].weekday()}")] for d in days]
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_reschedule")])
    
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return RESCHEDULE_CHOOSE_DAY

@require_student
async def student_reschedule_choose_day(update, context):
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ schedule_id
    if 'reschedule_schedule_id' not in context.user_data:
        await query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_reschedule")]])
        )
        return ConversationHandler.END
    
    day_of_week = int(query.data.split('_')[-1])
    week_offset = context.user_data.get('reschedule_week_offset', 0)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    today = datetime.datetime.now()
    target_date = today + timedelta(weeks=week_offset)
    
    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    while target_date.weekday() != day_of_week:
        target_date += timedelta(days=1)
    
    context.user_data['reschedule_date'] = target_date
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
    db = context.bot_data['db']
    schedule_id = context.user_data['reschedule_schedule_id']
    schedule = db.get_schedule_by_id(schedule_id)
    lesson_duration = schedule.duration
    slots = db.get_available_slots_for_day(target_date, lesson_duration)
    
    if not slots:
        await query.edit_message_text(
            text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_reschedule")]])
        )
        return ConversationHandler.END
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
    context.user_data['reschedule_time_page'] = 0
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤ –ø–æ 6 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page = 0
    per_page = 6
    total = len(slots)
    max_page = (total + per_page - 1) // per_page - 1
    page_slots = slots[page * per_page:min(page * per_page + per_page, total)]
    slot_buttons = [[InlineKeyboardButton(slot['display'], callback_data=f"reschedule_time_{slot['time']}")] for slot in page_slots]
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="reschedule_time_prev"))
    if page < max_page:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data="reschedule_time_next"))
    slot_buttons.append(nav_buttons)
    slot_buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_reschedule")])
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:",
        reply_markup=InlineKeyboardMarkup(slot_buttons)
    )
    return RESCHEDULE_CHOOSE_TIME

@require_student
async def student_reschedule_choose_time(update, context):
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ schedule_id
    if 'reschedule_schedule_id' not in context.user_data:
        await query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_reschedule")]])
        )
        return ConversationHandler.END
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if query.data == "reschedule_time_prev":
        page = int(context.user_data.get('reschedule_time_page', 0))
        if page > 0:
            context.user_data['reschedule_time_page'] = page - 1
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ—Ç—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        date = context.user_data['reschedule_date']
        db = context.bot_data['db']
        schedule_id = context.user_data['reschedule_schedule_id']
        schedule = db.get_schedule_by_id(schedule_id)
        lesson_duration = schedule.duration
        slots = db.get_available_slots_for_day(date, lesson_duration)
        
        if not slots:
            await query.edit_message_text(
                text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_reschedule")]])
            )
            return ConversationHandler.END
        
        page = int(context.user_data.get('reschedule_time_page', 0))
        per_page = 6
        total = len(slots)
        max_page = (total + per_page - 1) // per_page - 1
        page_slots = slots[page * per_page:min(page * per_page + per_page, total)]
        slot_buttons = [[InlineKeyboardButton(slot['display'], callback_data=f"reschedule_time_{slot['time']}")] for slot in page_slots]
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="reschedule_time_prev"))
        if page < max_page:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data="reschedule_time_next"))
        slot_buttons.append(nav_buttons)
        slot_buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_reschedule")])
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:",
            reply_markup=InlineKeyboardMarkup(slot_buttons)
        )
        return RESCHEDULE_CHOOSE_TIME
    
    elif query.data == "reschedule_time_next":
        page = int(context.user_data.get('reschedule_time_page', 0))
        context.user_data['reschedule_time_page'] = page + 1
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ—Ç—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        date = context.user_data['reschedule_date']
        db = context.bot_data['db']
        schedule_id = context.user_data['reschedule_schedule_id']
        schedule = db.get_schedule_by_id(schedule_id)
        lesson_duration = schedule.duration
        slots = db.get_available_slots_for_day(date, lesson_duration)
        
        if not slots:
            await query.edit_message_text(
                text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_reschedule")]])
            )
            return ConversationHandler.END
        
        page = int(context.user_data.get('reschedule_time_page', 0))
        per_page = 6
        total = len(slots)
        max_page = (total + per_page - 1) // per_page - 1
        page_slots = slots[page * per_page:min(page * per_page + per_page, total)]
        slot_buttons = [[InlineKeyboardButton(slot['display'], callback_data=f"reschedule_time_{slot['time']}")] for slot in page_slots]
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data="reschedule_time_prev"))
        if page < max_page:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data="reschedule_time_next"))
        slot_buttons.append(nav_buttons)
        slot_buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_reschedule")])
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞:",
            reply_markup=InlineKeyboardMarkup(slot_buttons)
        )
        return RESCHEDULE_CHOOSE_TIME
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    time_str = query.data.split('_')[-1]
    if ':' not in time_str:  # –≠—Ç–æ –Ω–µ –≤—Ä–µ–º—è, –∞ –∫–æ–º–∞–Ω–¥–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        return RESCHEDULE_CHOOSE_TIME
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    context.user_data['reschedule_time'] = time_str
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    schedule_id = context.user_data['reschedule_schedule_id']
    db = context.bot_data['db']
    schedule = db.get_schedule_by_id(schedule_id)
    student = db.get_student_by_id(schedule.student_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∑–∞–Ω—è—Ç–∏–∏
    days_ru = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    current_day = days_ru[schedule.day_of_week]
    current_time = schedule.time
    current_duration = schedule.duration
    # –î–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è (–±–µ—Ä—ë–º –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º –ø–æ –¥–Ω—é –Ω–µ–¥–µ–ª–∏)
    today = datetime.datetime.now().date()
    current_date = today + datetime.timedelta((schedule.day_of_week - today.weekday()) % 7)
    current_date_str = current_date.strftime('%d.%m.%Y')

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –≤—Ä–µ–º–µ–Ω–∏
    new_date = context.user_data['reschedule_date']
    new_day = days_ru[new_date.weekday()]
    new_time = time_str
    new_date_str = new_date.strftime('%d.%m.%Y')

    confirmation_text = (
        f"üìÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞</b>\n\n"
        f"üìö <b>–¢–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ:</b> {current_day}, {current_date_str} –≤ {current_time}\n\n"
        f"üîÑ <b>–ù–æ–≤–æ–µ –≤—Ä–µ–º—è:</b> {new_day}, {new_date_str} –≤ {new_time}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–µ—Ä–µ–Ω–æ—Å?"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="reschedule_confirm")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="student_reschedule")]
    ]
    
    await query.edit_message_text(
        text=confirmation_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )
    return RESCHEDULE_CONFIRM

@require_student
async def student_reschedule_confirm(update, context):
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if 'reschedule_schedule_id' not in context.user_data:
        await query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_reschedule")]])
        )
        return ConversationHandler.END
    
    if query.data == "reschedule_confirm":
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å
        schedule_id = context.user_data['reschedule_schedule_id']
        new_date = context.user_data['reschedule_date']
        new_time = context.user_data['reschedule_time']
        
        db = context.bot_data['db']
        schedule = db.get_schedule_by_id(schedule_id)
        student = db.get_student_by_id(schedule.student_id)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å
        reschedule_request = db.create_reschedule_request(
            student_id=student.id,
            schedule_id=schedule_id,
            requested_date=new_date,
            requested_time=new_time,
            status='pending'
        )
        
        if reschedule_request:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            admin_ids = db.get_admin_ids()
            for admin_id in admin_ids:
                try:
                    admin = db.get_admin_by_telegram_id(admin_id)
                    if admin:
                        days_ru = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
                        today = datetime.datetime.now().date()
                        current_date_obj = today + datetime.timedelta((schedule.day_of_week - today.weekday()) % 7)
                        current_date_str = current_date_obj.strftime('%d.%m.%Y')
                        current_day_ru = days_ru[schedule.day_of_week]
                        new_day_ru = days_ru[new_date.weekday()]
                        new_date_str = new_date.strftime('%d.%m.%Y')
                        notification_text = (
                            f"üë§ <b>–°—Ç—É–¥–µ–Ω—Ç:</b> {student.name}\n\n"
                            f"üìö <b>–¢–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ:</b> {current_day_ru}, {current_date_str} –≤ {schedule.time}\n\n"
                            f"üîÑ <b>–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:</b> {new_day_ru}, {new_date_str} –≤ {new_time}"
                        )
                        db.add_admin_notification(admin.id, 'reschedule', notification_text)
                    # 1. Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    push_msg = await context.bot.send_message(
                        chat_id=admin_id,
                        text="üîî –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–Ω—è—Ç–∏—è! –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.",
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID push-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è
                    if admin:
                        db.add_admin_push_message(admin.id, push_msg.message_id)
                    # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    from handlers.admin_handlers import send_admin_menu_by_chat_id
                    await send_admin_menu_by_chat_id(context, admin_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç—É
            await query.edit_message_text(
                text="‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="student_menu")]])
            )
        else:
            await query.edit_message_text(
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="student_menu")]])
            )
    else:
        # –û—Ç–º–µ–Ω–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        await show_student_schedule_menu(update, context)
        return ConversationHandler.END
    return ConversationHandler.END

@require_student
async def student_reschedule_send(update, context):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ student_reschedule_confirm
    pass

@require_student
async def student_reschedule_menu(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –∑–∞–Ω—è—Ç–∏–π"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
    reschedule_keys = ['reschedule_schedule_id', 'reschedule_week_offset', 'reschedule_date', 'reschedule_time', 'reschedule_time_page']
    for key in reschedule_keys:
        if key in context.user_data:
            del context.user_data[key]
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = context.bot_data['db']
    user_id = query.from_user.id
    
    student = db.get_student_by_telegram_id(user_id)
    
    if not student:
        await query.edit_message_text(
            text="‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
        )
        return ConversationHandler.END
    
    schedules = db.get_student_schedule(student.id)
    
    if not schedules:
        await query.edit_message_text(
            text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
        )
        return ConversationHandler.END
    
    # –í—ã–±–æ—Ä –∑–∞–Ω—è—Ç–∏—è
    days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    try:
        buttons = [[InlineKeyboardButton(f"{days[s.day_of_week]} {s.time}", callback_data=f"reschedule_lesson_{s.id}")] for s in schedules]
    except Exception as e:
        await query.edit_message_text(
            text=f"‚ùå –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ–Ω—é –ø–µ—Ä–µ–Ω–æ—Å–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
        )
        return ConversationHandler.END
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")])
    
    await query.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return RESCHEDULE_CHOOSE_LESSON

@require_student
async def show_student_schedule_menu(update, context, student=None):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞.
    –ï—Å–ª–∏ student –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –±–µ—Ä—ë—Ç—Å—è –∏–∑ context.user_data['student'] –∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞
    reschedule_keys = ['reschedule_schedule_id', 'reschedule_week_offset', 'reschedule_date', 'reschedule_time', 'reschedule_time_page']
    for key in reschedule_keys:
        if key in context.user_data:
            del context.user_data[key]
    query = update.callback_query
    db = context.bot_data['db']
    if student is None:
        student = context.user_data.get('student')
        if student is None:
            # –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ context, –∏—â–µ–º –ø–æ telegram_id
            user_id = query.from_user.id
            student = db.get_student_by_telegram_id(user_id)
            if student is None:
                await query.edit_message_text(
                    text="‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
                )
                return
    schedules = db.get_student_schedule(student.id)
    next_lesson = db.get_next_lesson(student.id)
    if not schedules:
        await query.edit_message_text(
            text="üìÖ <b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n\n‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]]),
            parse_mode=ParseMode.HTML
        )
        return
    days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    theme = student.theme or 'classic'
    schedule_text = "üìÖ <b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n\n"
    for schedule in schedules:
        day_name = days[schedule.day_of_week]
        schedule_text += f"üìÖ <b>{day_name}</b> –≤ {schedule.time}\n"
    if next_lesson:
        next_date = format_moscow_time(next_lesson['date'], '%d.%m.%Y')
        schedule_text += f"\nüéØ <b>–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ:</b>\n"
        schedule_text += f"üìÖ {next_lesson['day_name']}, {next_date}\n"
        schedule_text += f"‚è∞ –í—Ä–µ–º—è: {next_lesson['time']}\n"
        schedule_text += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {next_lesson['duration']} –º–∏–Ω—É—Ç"
    buttons = [
        [InlineKeyboardButton(f"üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–Ω—è—Ç–∏–µ", callback_data="student_reschedule")],
        [themed_button('back', theme, 'student_back')]
    ]
    await query.edit_message_text(
        text=schedule_text,
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode=ParseMode.HTML
    )

@require_student
async def show_avatar_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏"""
    user_id = update.effective_user.id
    student = context.bot_data['db'].get_student_by_telegram_id(user_id)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –Ω–∞–∑–≤–∞–Ω–∏—è–º
    theme = student.theme or "classic"
    names = THEME_AVATAR_NAMES.get(theme, THEME_AVATAR_NAMES["classic"])
    
    emoji_list = ["ü¶ä", "üêº", "ü¶â", "üêß", "ü¶Å", "üê∏", "üêª", "üê®", "üêØ", "üê∞", "ü¶Ñ", "üêô", "üê¢", "üê•", "ü¶ã"]
    keyboard = []
    row = []
    for i, emoji in enumerate(emoji_list, 1):
        row.append(InlineKeyboardButton(emoji, callback_data=f"set_avatar_{emoji}"))
        if i % 5 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton(f"üîô {names['back']}", callback_data="student_personalization")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        text=f"ü¶ä {names['title']}",
        reply_markup=reply_markup
    )

@require_student
async def show_theme_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã"""
    user_id = update.effective_user.id
    student = context.bot_data['db'].get_student_by_telegram_id(user_id)
    theme = student.theme or "classic"
    names = THEME_THEME_NAMES.get(theme, THEME_THEME_NAMES["classic"])
    themes = [
        ("üåû –ö–ª–∞—Å—Å–∏–∫–∞", "classic"),
        ("üåö –¢—ë–º–Ω–∞—è", "dark"),
        ("üßÄ –°—ã—Ä–Ω–∞—è", "cheese"),
        ("ü§ñ –ö–∏–±–µ—Ä–ø–∞–Ω–∫", "cyber"),
        ("üéÆ –ò–≥—Ä—ã", "games"),
        ("üóæ –ê–Ω–∏–º–µ", "anime"),
        ("üï∫ Jojo", "jojo"),
    ]
    keyboard = []
    row = []
    for i, (name, code) in enumerate(themes, 1):
        row.append(InlineKeyboardButton(name, callback_data=f"set_theme_{code}"))
        if i % 2 == 0:  # –ö–∞–∂–¥—ã–µ 2 –∫–Ω–æ–ø–∫–∏ - –Ω–æ–≤—ã–π —Ä—è–¥
            keyboard.append(row)
            row = []
    if row:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∫–Ω–æ–ø–∫–∏ –≤ –Ω–µ–ø–æ–ª–Ω–æ–º —Ä—è–¥—É
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton(f"üîô {names['back']}", callback_data="student_personalization")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        text=f"üåà {names['title']}",
        reply_markup=reply_markup
    )

@require_student
async def handle_student_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ñ–∏–¥–±–µ–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ, –∑–∞–º–µ—á–∞–Ω–∏–µ –∏–ª–∏ –±–∞–≥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_settings")]
        ])
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∏–¥–±–µ–∫–∞
    context.user_data['awaiting_feedback'] = True
    return

@require_student
async def handle_student_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get('awaiting_feedback'):
        db = context.bot_data['db']
        student = db.get_student_by_telegram_id(update.effective_user.id)
        feedback = update.message.text
        # –ü–æ–ª—É—á–∞–µ–º id –∞–¥–º–∏–Ω–∞ (–∏–ª–∏ —Å–ø–∏—Å–æ–∫)
        admin_ids = db.get_admin_ids() if hasattr(db, 'get_admin_ids') else [db.get_admin_telegram_id()]
        for admin_id in admin_ids:
            admin = db.get_admin_by_telegram_id(admin_id) if hasattr(db, 'get_admin_by_telegram_id') else None
            if admin:
                notif_text = f"–§–∏–¥–±–µ–∫ –æ—Ç {student.name}:\n\n{feedback}"
                db.add_admin_notification(admin.id, 'feedback', notif_text)
                # Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                try:
                    msg = await context.bot.send_message(
                        chat_id=admin_id,
                        text="üîî –£ –≤–∞—Å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'."
                    )
                    db.add_admin_push_message(admin.id, msg.message_id)
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
                    from handlers.admin_handlers import send_admin_menu_by_chat_id
                    await send_admin_menu_by_chat_id(context, admin_id)
                except Exception:
                    pass
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        msg_id = context.user_data.pop('feedback_menu_msg_id', None)
        if msg_id:
            try:
                await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=msg_id)
            except Exception:
                pass
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à —Ñ–∏–¥–±–µ–∫! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫", callback_data="student_settings")]
            ])
        )
        context.user_data['awaiting_feedback'] = False
        return
    # –ï—Å–ª–∏ –Ω–µ –∂–¥–µ–º —Ñ–∏–¥–±–µ–∫–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤