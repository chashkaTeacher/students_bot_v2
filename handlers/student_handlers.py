from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from core.database import Database

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ENTER_PASSWORD = 0
ENTER_DISPLAY_NAME = 1

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
user_settings = {}

async def get_user_settings(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    if user_id not in user_settings:
        user_settings[user_id] = {
            "display_name": None,
            "greeting": None
        }
    return user_settings[user_id]

async def student_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    user_id = update.effective_user.id
    student = context.bot_data['db'].get_student_by_telegram_id(user_id)
    
    keyboard = [
        [
            InlineKeyboardButton("üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="student_homework")
        ],
        [
            InlineKeyboardButton("üìù –ö–æ–Ω—Å–ø–µ–∫—Ç—ã", callback_data="student_notes")
        ],
        [
            InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="student_schedule"),
            InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—é", callback_data="student_join_lesson")
        ],
        [
            InlineKeyboardButton("üìÑ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="student_current_variant")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="student_settings")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    display_name = student.display_name or student.name
    greeting = f"üëã –ü—Ä–∏–≤–µ—Ç, {display_name}!"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=greeting,
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            text=greeting,
            reply_markup=reply_markup
        )

async def show_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    keyboard = [
        [
            InlineKeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è", callback_data="student_change_name")
        ],
        [
            InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="student_reset_settings")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=reply_markup
    )

async def handle_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è"""
    db: Database = context.bot_data['db']
    password = update.message.text
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    student = db.get_student_by_password(password)
    if student:
        # –û–±–Ω–æ–≤–ª—è–µ–º Telegram ID —Å—Ç—É–¥–µ–Ω—Ç–∞
        db.update_student_telegram_id(student.id, user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞
        await student_menu(update, context)
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return ENTER_PASSWORD

async def handle_student_actions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None | int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "student_homework":
        await query.edit_message_text(
            text="üìö –†–∞–∑–¥–µ–ª –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")
            ]])
        )
    elif query.data == "student_notes":
        await query.edit_message_text(
            text="üìù –†–∞–∑–¥–µ–ª –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")
            ]])
        )
    elif query.data == "student_schedule":
        await query.edit_message_text(
            text="üìÖ –†–∞–∑–¥–µ–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")
            ]])
        )
    elif query.data == "student_join_lesson":
        student = context.bot_data['db'].get_student_by_telegram_id(query.from_user.id)
        if student and student.lesson_link:
            await query.edit_message_text(
                text=f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à–µ –∑–∞–Ω—è—Ç–∏–µ:\n{student.lesson_link}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")
                ]])
            )
        else:
            await query.edit_message_text(
                text="‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")
                ]])
            )
    elif query.data == "student_current_variant":
        await query.edit_message_text(
            text="üìÑ –†–∞–∑–¥–µ–ª –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")
            ]])
        )
    elif query.data == "student_settings":
        await show_settings_menu(update, context)
    elif query.data == "student_change_name":
        await query.edit_message_text(
            text="üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="student_back_to_settings")
            ]])
        )
        return ENTER_DISPLAY_NAME
    elif query.data == "student_reset_settings":
        student = context.bot_data['db'].get_student_by_telegram_id(query.from_user.id)
        if student:
            context.bot_data['db'].reset_student_settings(student.id)
            await query.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!")
        await student_menu(update, context)
    elif query.data == "student_back_to_settings":
        await show_settings_menu(update, context)
    elif query.data == "student_back":
        await student_menu(update, context)

async def handle_display_name_change(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏"""
    user_id = update.effective_user.id
    new_name = update.message.text
    
    student = context.bot_data['db'].get_student_by_telegram_id(user_id)
    if student:
        context.bot_data['db'].update_student_settings(student.id, display_name=new_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_message = await update.message.reply_text("‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        await student_menu(update, context)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        import asyncio
        await asyncio.sleep(2)
        await confirm_message.delete()
    
    return ConversationHandler.END

async def show_student_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞–º–∏"""
    query = update.callback_query
    
    keyboard = [
        [
            InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞", callback_data="student_add"),
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤", callback_data="student_list")
        ],
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="student_edit"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="student_delete")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]

async def handle_student_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    action, student_id = query.data.split("_")[1:]  # student_edit_123 -> ["student", "edit", "123"]
    
    if action == "edit":
        keyboard = [
            [
                InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"student_edit_name_{student_id}"),
                InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"student_edit_link_{student_id}")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]

async def handle_student_edit_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    parts = query.data.split("_")  # student_edit_link_123 -> ["student", "edit", "link", "123"]
    action = parts[2]
    student_id = int(parts[3])
    
    user_id = update.effective_user.id
    if user_id not in temp_data:
        temp_data[user_id] = {}
    temp_data[user_id]["student_id"] = student_id
    
    db = Database()
    student = db.get_student_by_id(student_id)
    
    if action == "link":
        await query.edit_message_text(
            text=f"üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —É—á–µ–Ω–∏–∫–∞:\n"
                 f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {student.lesson_link}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]])
        )
        return EDIT_LINK
    else:  # action == "name"
        await query.edit_message_text(
            text=f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞:\n"
                 f"–¢–µ–∫—É—â–µ–µ –∏–º—è: {student.name}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]])
        )
        return EDIT_NAME

async def handle_student_link_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —É—á–µ–Ω–∏–∫–∞"""
    user_id = update.effective_user.id
    if user_id not in temp_data or "student_id" not in temp_data[user_id]:
        await update.message.reply_text(
            text="‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return ConversationHandler.END
    
    student_id = temp_data[user_id]["student_id"]
    new_link = update.message.text
    
    db = Database()
    student = db.get_student_by_id(student_id)
    if not student:
        await update.message.reply_text(
            text="‚ùå –û—à–∏–±–∫–∞: —É—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return ConversationHandler.END
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.update_student_lesson_link(student_id, new_link)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text(
        text=f"‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
             f"üë§ –£—á–µ–Ω–∏–∫: {student.name}\n"
             f"üîó –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {new_link}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
        ]])
    )
    return ConversationHandler.END 