from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from telegram.constants import ParseMode
from core.database import Database, format_moscow_time
import os
import datetime
import pytz

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ENTER_PASSWORD = 0
ENTER_DISPLAY_NAME = 1

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
user_settings = {}

temp_data = {}
EDIT_NAME = 1000
EDIT_LINK = 1001

async def get_user_settings(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    if user_id not in user_settings:
        user_settings[user_id] = {
            "display_name": None,
            "greeting": None
        }
    return user_settings[user_id]

async def student_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    user_id = update.effective_user.id
    student = context.bot_data['db'].get_student_by_telegram_id(user_id)
    db = context.bot_data['db']
    unread_count = len(db.get_notifications(student.id, only_unread=True)) if student else 0
    notif_text = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({unread_count})" if unread_count else "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    
    if student.exam_type.value == '–®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞':
        keyboard = [
            [InlineKeyboardButton("üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="student_homework")],
            [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—é", callback_data="student_join_lesson")],
            [InlineKeyboardButton("üìù –ö–æ–Ω—Å–ø–µ–∫—Ç—ã", callback_data="student_notes")],
            [
                InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="student_schedule"),
                InlineKeyboardButton(notif_text, callback_data="student_notifications")
            ],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="student_settings")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="student_homework_menu")],
            [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—é", callback_data="student_join_lesson")],
            [
                InlineKeyboardButton("üìù –ö–æ–Ω—Å–ø–µ–∫—Ç—ã", callback_data="student_notes"),
                InlineKeyboardButton("üó∫Ô∏è –†–æ–∞–¥–º–∞–ø", callback_data="student_roadmap")
            ],
            [
                InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="student_schedule"),
                InlineKeyboardButton(notif_text, callback_data="student_notifications")
            ],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="student_settings")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    display_name = student.display_name or student.name
    greeting = f"üëã –ü—Ä–∏–≤–µ—Ç, {display_name}!"
    
    if update.callback_query:
        msg = await update.callback_query.edit_message_text(
            text=greeting,
            reply_markup=reply_markup
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ –±–∞–∑–µ
        db.update_student_menu_message_id(student.id, msg.message_id)
    else:
        msg = await update.message.reply_text(
            text=greeting,
            reply_markup=reply_markup
        )
        db.update_student_menu_message_id(student.id, msg.message_id)

async def show_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = update.effective_user.id
    student = context.bot_data['db'].get_student_by_telegram_id(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    show_old_text = "üëÅÔ∏è –°–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è" if student.show_old_homework else "üëÅÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è"
    
    keyboard = [
        [
            InlineKeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è", callback_data="student_change_name")
        ],
        [
            InlineKeyboardButton(show_old_text, callback_data="student_toggle_old_homework")
        ],
        [
            InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="student_reset_settings")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=reply_markup
    )

async def handle_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è"""
    db: Database = context.bot_data['db']
    password = update.message.text
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    student = db.get_student_by_password(password)
    if student:
        # –û–±–Ω–æ–≤–ª—è–µ–º Telegram ID —Å—Ç—É–¥–µ–Ω—Ç–∞
        db.update_student_telegram_id(student.id, user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞
        await student_menu(update, context)
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return ENTER_PASSWORD

async def handle_student_actions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None | int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        pass
    
    db: Database = context.bot_data['db']
    user_id = query.from_user.id
    student = db.get_student_by_telegram_id(user_id)
    
    if query.data == "student_homework":
        await show_student_homework_menu(update, context, student, page=int(context.user_data.get('homework_page', 0)))
        return
    elif query.data.startswith("student_hw_file_"):
        hw_id = int(query.data.split("_")[-1])
        hw = db.get_homework_by_id(hw_id)
        if not hw:
            await query.message.reply_text(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (id={hw_id})")
        elif not hw.file_path:
            await query.message.reply_text(f"‚ùå –£ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç —Ñ–∞–π–ª–∞ (id={hw_id})")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
            file_path = os.path.join(os.getcwd(), hw.file_path)
            if not os.path.exists(file_path):
                await query.message.reply_text(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {hw.file_path}")
            else:
                # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –º–µ–Ω—é (–∑–∞–º–µ–Ω—è–µ–º –Ω–∞ "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞...")
                try:
                    await query.edit_message_text(text="‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞...")
                except Exception as e:
                    if "Message is not modified" not in str(e):
                        raise
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                try:
                    await query.message.reply_document(document=file_path, caption=f"üìù {hw.title}")
                except Exception as e:
                    await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
                # –ü–æ—Å–ª–µ —Ñ–∞–π–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                buttons = [[InlineKeyboardButton("–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ", url=hw.link)]]
                if hw and hw.file_path:
                    buttons.append([InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"student_hw_file_{hw_id}")])
                buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_homework")])
                await query.message.reply_text(
                    text=f"üìù <b>{hw.title}</b>",
                    reply_markup=InlineKeyboardMarkup(buttons),
                    parse_mode=ParseMode.HTML
                )
        return
    elif query.data.startswith("student_hw_"):
        hw_id = int(query.data.split("_")[-1])
        hw = db.get_homework_by_id(hw_id)
        if not hw:
            await query.edit_message_text(
                text="‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_homework")]])
            )
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É —ç–∫–∑–∞–º–µ–Ω–∞
        exam_emoji = {
            '–û–ì–≠': 'üìù',
            '–ï–ì–≠': 'üìö',
            '–®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞': 'üè´',
        }
        emoji = exam_emoji.get(getattr(hw, 'exam_type', ''), 'üìñ')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        exam_type = getattr(hw, 'exam_type', '')
        exam_info = f"üìù –≠–∫–∑–∞–º–µ–Ω: {exam_type.value}\n" if exam_type else ""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º
        homeworks_data = db.get_homeworks_for_student_with_filter(student.id)
        is_current = False
        if homeworks_data:
            is_current = homeworks_data[-1][0].id == hw_id
        
        # –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
        status_text = "üÜï –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ" if is_current else "üìö –ü—Ä–æ–π–¥–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
        
        message_text = (
            f"{emoji} <b>{hw.title}</b>\n"
            f"{exam_info}"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"{status_text}\n"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Å —ç–º–æ–¥–∑–∏
        buttons = [[InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –æ–Ω–ª–∞–π–Ω", url=hw.link)]]
        if hw.file_path:
            buttons.append([InlineKeyboardButton("üìé –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"student_hw_file_{hw_id}")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_homework")])
        
        try:
            await query.edit_message_text(
                text=message_text,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            if "Message is not modified" not in str(e):
                raise
        return
    elif query.data == "student_notes":
        await show_student_notes_menu(update, context, student, page=int(context.user_data.get('notes_page', 0)))
        return
    elif query.data == "student_notes_prev":
        page = int(context.user_data.get('notes_page', 0))
        if page > 0:
            await show_student_notes_menu(update, context, student, page=page-1)
        else:
            await query.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        return
    elif query.data == "student_notes_next":
        student_notes = db.get_notes_for_student(student.id)
        page = int(context.user_data.get('notes_page', 0))
        per_page = 6  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ 6, –∫–∞–∫ –≤ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        total = len(student_notes)
        max_page = (total + per_page - 1) // per_page - 1
        if page < max_page:
            await show_student_notes_menu(update, context, student, page=page+1)
        else:
            await query.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        return
    elif query.data == "student_schedule":
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
        schedules = db.get_student_schedule(student.id)
        next_lesson = db.get_next_lesson(student.id)
        
        if not schedules:
            await query.edit_message_text(
                text="üìÖ <b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n\n‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")
                ]]),
                parse_mode=ParseMode.HTML
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
        schedule_text = "üìÖ <b>–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n\n"
        
        for schedule in schedules:
            day_name = days[schedule.day_of_week]
            duration_text = f" ({schedule.duration} –º–∏–Ω)" if schedule.duration != 60 else ""
            schedule_text += f"üìÖ <b>{day_name}</b> –≤ {schedule.time}{duration_text}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–Ω—è—Ç–∏–∏
        if next_lesson:
            next_date = format_moscow_time(next_lesson['date'], '%d.%m.%Y')
            schedule_text += f"\nüéØ <b>–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ:</b>\n"
            schedule_text += f"üìÖ {next_lesson['day_name']}, {next_date}\n"
            schedule_text += f"‚è∞ –í—Ä–µ–º—è: {next_lesson['time']}\n"
            schedule_text += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {next_lesson['duration']} –º–∏–Ω—É—Ç"
        
        await query.edit_message_text(
            text=schedule_text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")
            ]]),
            parse_mode=ParseMode.HTML
        )
    elif query.data == "student_join_lesson":
        if student and student.lesson_link:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–Ω—è—Ç–∏–∏
            next_lesson = db.get_next_lesson(student.id)
            
            if next_lesson:
                next_date = format_moscow_time(next_lesson['date'], '%d.%m.%Y')
                lesson_text = (
                    f"üìÖ <b>–°–ª–µ–¥—É—é—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ</b>\n\n"
                    f"üóìÔ∏è –î–∞—Ç–∞: {next_date}\n"
                    f"üìÖ –î–µ–Ω—å: {next_lesson['day_name']}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {next_lesson['time']}\n"
                    f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {next_lesson['duration']} –º–∏–Ω—É—Ç\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—é:"
                )
            else:
                lesson_text = (
                    f"üìÖ <b>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∑–∞–Ω—è—Ç–∏—é</b>\n\n"
                    f"üóìÔ∏è –î–∞—Ç–∞: —É—Ç–æ—á–Ω—è–µ—Ç—Å—è\n"
                    f"‚è∞ –í—Ä–µ–º—è: —É—Ç–æ—á–Ω—è–µ—Ç—Å—è\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—é:"
                )
            
            await query.edit_message_text(
                text=lesson_text,
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üé• –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—é", url=student.lesson_link)],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]
                ]),
                parse_mode=ParseMode.HTML
            )
        else:
            await query.edit_message_text(
                text="‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")
                ]])
            )
    elif query.data == "student_current_variant":
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ —ç–∫–∑–∞–º–µ–Ω—É —É—á–µ–Ω–∏–∫–∞
        if not student or not student.exam_type:
            await query.edit_message_text(
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
            )
            return
        variant = db.get_latest_variant(student.exam_type)
        if not variant:
            await query.edit_message_text(
                text="üìÑ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
            )
            return
        # –û—Ñ–æ—Ä–º–ª—è–µ–º –¥–∞—Ç—É –≤—ã–¥–∞—á–∏
        issued_date = format_moscow_time(variant.created_at, '%d.%m.%Y') if variant.created_at else "-"
        # –í—ã—á–∏—Å–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        dt = variant.created_at or datetime.datetime.now()
        days_ahead = 0 if dt.weekday() == 0 else 7 - dt.weekday()
        next_monday = dt + datetime.timedelta(days=days_ahead)
        deadline = format_moscow_time(next_monday, '%d.%m.%Y')
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            "üìÑ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç</b>\n\n"
            f"üóìÔ∏è –í—ã–¥–∞–Ω: {issued_date}\n"
            f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline} (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî <a href=\"https://t.me/ChashkaDurashka\">–ø–∏—à–∏ –°–∞—à–µ</a>."
        )
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç", url=variant.link)],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]
            ]),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=False
        )
        return
    elif query.data == "student_settings":
        await show_settings_menu(update, context)
    elif query.data == "student_change_name":
        await query.edit_message_text(
            text="üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="student_back_to_settings")
            ]])
        )
        return ENTER_DISPLAY_NAME
    elif query.data == "student_reset_settings":
        if student:
            context.bot_data['db'].reset_student_settings(student.id)
            await query.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!")
        await student_menu(update, context)
    elif query.data == "student_toggle_old_homework":
        if student:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            new_setting = not student.show_old_homework
            context.bot_data['db'].update_student_show_old_homework(student.id, new_setting)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await show_settings_menu(update, context)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            status_text = "–≤–∫–ª—é—á–µ–Ω" if new_setting else "–æ—Ç–∫–ª—é—á–µ–Ω"
            await query.answer(f"‚úÖ –ü–æ–∫–∞–∑ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π {status_text}!")
        return
    elif query.data == "student_back_to_settings":
        await show_settings_menu(update, context)
    elif query.data == "student_back":
        await student_menu(update, context)
    elif query.data == "student_notifications":
        # –°–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        context.user_data['notif_page'] = 0
        notifications = db.get_notifications(student.id)
        if not notifications:
            await query.edit_message_text(
                text="üîî –ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
            )
            return
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        page = int(context.user_data.get('notif_page', 0))
        per_page = 5
        total = len(notifications)
        max_page = (total + per_page - 1) // per_page - 1
        page_notifications = notifications[page * per_page:min(page * per_page + per_page, total)]
        notif_texts = []
        for i, notif in enumerate(page_notifications, 1):
            status = "üÜï " if not notif.is_read else "üìã "
            dt = format_moscow_time(notif.created_at)
            # –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ —Å —ç–º–æ–¥–∑–∏
            if notif.type == 'homework':
                notif_type = "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
            elif notif.type == 'variant':
                notif_type = "üìÑ –í–∞—Ä–∏–∞–Ω—Ç"
            elif notif.type == 'schedule':
                notif_type = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
            else:
                notif_type = "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            text = f"<b>{status}{notif_type}</b>\n"
            text += f"üìÖ <i>{dt}</i>\n\n"
            text += f"üìù {notif.text}"
            
            if notif.link:
                text += f"\nüîó <a href='{notif.link}'>–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É</a>"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(page_notifications):
                text += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            
            notif_texts.append(text)
        
        text = "\n\n".join(notif_texts)
        db.mark_notifications_read(student.id)
        buttons = []
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if max_page > 0:
            nav_row = []
            if page > 0:
                nav_row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="notif_prev"))
            nav_row.append(InlineKeyboardButton(f"{page+1}/{max_page+1}", callback_data="noop"))
            if page < max_page:
                nav_row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="notif_next"))
            buttons.append(nav_row)
        
        buttons.append([InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="notif_clear")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")])
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        header = f"üîî <b>–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        header += f"üìä –í—Å–µ–≥–æ: {total}\n"
        header += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        
        await query.edit_message_text(
            text=header + text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return
    elif query.data == "notif_next":
        context.user_data['notif_page'] = context.user_data.get('notif_page', 0) + 1
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        notifications = db.get_notifications(student.id)
        if not notifications:
            await query.edit_message_text(
                text="üîî –ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
            )
            return
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        page = int(context.user_data.get('notif_page', 0))
        per_page = 5
        total = len(notifications)
        max_page = (total + per_page - 1) // per_page - 1
        page_notifications = notifications[page * per_page:min(page * per_page + per_page, total)]
        notif_texts = []
        for i, notif in enumerate(page_notifications, 1):
            status = "üÜï " if not notif.is_read else "üìã "
            dt = format_moscow_time(notif.created_at)
            # –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ —Å —ç–º–æ–¥–∑–∏
            if notif.type == 'homework':
                notif_type = "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
            elif notif.type == 'variant':
                notif_type = "üìÑ –í–∞—Ä–∏–∞–Ω—Ç"
            elif notif.type == 'schedule':
                notif_type = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
            else:
                notif_type = "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            text = f"<b>{status}{notif_type}</b>\n"
            text += f"üìÖ <i>{dt}</i>\n\n"
            text += f"üìù {notif.text}"
            
            if notif.link:
                text += f"\nüîó <a href='{notif.link}'>–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É</a>"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(page_notifications):
                text += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            
            notif_texts.append(text)
        
        text = "\n\n".join(notif_texts)
        db.mark_notifications_read(student.id)
        buttons = []
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if max_page > 0:
            nav_row = []
            if page > 0:
                nav_row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="notif_prev"))
            nav_row.append(InlineKeyboardButton(f"{page+1}/{max_page+1}", callback_data="noop"))
            if page < max_page:
                nav_row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="notif_next"))
            buttons.append(nav_row)
        
        buttons.append([InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="notif_clear")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")])
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        header = f"üîî <b>–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        header += f"üìä –í—Å–µ–≥–æ: {total}\n"
        header += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        
        await query.edit_message_text(
            text=header + text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return
    elif query.data == "notif_prev":
        context.user_data['notif_page'] = max(0, context.user_data.get('notif_page', 0) - 1)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        notifications = db.get_notifications(student.id)
        if not notifications:
            await query.edit_message_text(
                text="üîî –ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
            )
            return
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        page = int(context.user_data.get('notif_page', 0))
        per_page = 5
        total = len(notifications)
        max_page = (total + per_page - 1) // per_page - 1
        page_notifications = notifications[page * per_page:min(page * per_page + per_page, total)]
        notif_texts = []
        for i, notif in enumerate(page_notifications, 1):
            status = "üÜï " if not notif.is_read else "üìã "
            dt = format_moscow_time(notif.created_at)
            # –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ —Å —ç–º–æ–¥–∑–∏
            if notif.type == 'homework':
                notif_type = "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
            elif notif.type == 'variant':
                notif_type = "üìÑ –í–∞—Ä–∏–∞–Ω—Ç"
            elif notif.type == 'schedule':
                notif_type = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
            else:
                notif_type = "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            text = f"<b>{status}{notif_type}</b>\n"
            text += f"üìÖ <i>{dt}</i>\n\n"
            text += f"üìù {notif.text}"
            
            if notif.link:
                text += f"\nüîó <a href='{notif.link}'>–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É</a>"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(page_notifications):
                text += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            
            notif_texts.append(text)
        
        text = "\n\n".join(notif_texts)
        db.mark_notifications_read(student.id)
        buttons = []
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if max_page > 0:
            nav_row = []
            if page > 0:
                nav_row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="notif_prev"))
            nav_row.append(InlineKeyboardButton(f"{page+1}/{max_page+1}", callback_data="noop"))
            if page < max_page:
                nav_row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="notif_next"))
            buttons.append(nav_row)
        
        buttons.append([InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="notif_clear")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")])
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        header = f"üîî <b>–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        header += f"üìä –í—Å–µ–≥–æ: {total}\n"
        header += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        
        await query.edit_message_text(
            text=header + text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return
    elif query.data == "notif_clear":
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –±–∞–∑—ã
        db.clear_notifications(student.id)
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
        push_msgs = db.get_push_messages(student.id)
        for push in push_msgs:
            try:
                await context.bot.delete_message(chat_id=student.telegram_id, message_id=push.message_id)
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
        db.clear_push_messages(student.id)
        context.user_data['notif_page'] = 0
        await query.edit_message_text(
            text="üîî –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
        )
        return
    elif query.data.startswith("student_note_file_"):
        note_id = int(query.data.split("_")[-1])
        note = db.get_note_by_id(note_id)
        if not note:
            await query.message.reply_text(f"‚ùå –ö–æ–Ω—Å–ø–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (id={note_id})")
        elif not note.file_path:
            await query.message.reply_text(f"‚ùå –£ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –Ω–µ—Ç —Ñ–∞–π–ª–∞ (id={note_id})")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
            file_path = os.path.join(os.getcwd(), note.file_path)
            if not os.path.exists(file_path):
                await query.message.reply_text(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {note.file_path}")
            else:
                # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –º–µ–Ω—é (–∑–∞–º–µ–Ω—è–µ–º –Ω–∞ "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞...")
                try:
                    await query.edit_message_text(text="‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞...")
                except Exception as e:
                    if "Message is not modified" not in str(e):
                        raise
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                try:
                    await query.message.reply_document(document=file_path, caption=f"üìö {note.title}")
                except Exception as e:
                    await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
                # –ü–æ—Å–ª–µ —Ñ–∞–π–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                buttons = [[InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –æ–Ω–ª–∞–π–Ω", url=note.link)]]
                if note and note.file_path:
                    buttons.append([InlineKeyboardButton("üìé –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"student_note_file_{note_id}")])
                buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_notes")])
                await query.message.reply_text(
                    text=f"üìö <b>{note.title}</b>",
                    reply_markup=InlineKeyboardMarkup(buttons),
                    parse_mode=ParseMode.HTML
                )
        return
    elif query.data.startswith("student_note_"):
        note_id = int(query.data.split("_")[-1])
        note = db.get_note_by_id(note_id)
        if not note:
            await query.edit_message_text(
                text="‚ùå –ö–æ–Ω—Å–ø–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_notes")]])
            )
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É —ç–∫–∑–∞–º–µ–Ω–∞
        exam_emoji = {
            '–û–ì–≠': 'üìù',
            '–ï–ì–≠': 'üìö',
            '–®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞': 'üè´',
        }
        emoji = exam_emoji.get(getattr(note, 'exam_type', ''), 'üìñ')
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        task_number = note.get_task_number()
        task_info = f"#Ô∏è‚É£ –ó–∞–¥–∞–Ω–∏–µ: ‚Ññ{task_number}\n" if task_number != float('inf') else ""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
        exam_type = getattr(note, 'exam_type', '')
        exam_info = f"üìù –≠–∫–∑–∞–º–µ–Ω: {exam_type.value}\n" if exam_type else ""
        
        message_text = (
            f"{emoji} <b>{note.title}</b>\n"
            f"{exam_info}"
            f"{task_info}"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ —Å —ç–º–æ–¥–∑–∏
        buttons = [[InlineKeyboardButton("üîó –û—Ç–∫—Ä—ã—Ç—å –æ–Ω–ª–∞–π–Ω", url=note.link)]]
        if note.file_path:
            buttons.append([InlineKeyboardButton("üìé –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"student_note_file_{note_id}")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_notes")])
        
        try:
            await query.edit_message_text(
                text=message_text,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            if "Message is not modified" not in str(e):
                raise
        return
    elif query.data == "student_homework_prev":
        page = int(context.user_data.get('homework_page', 0))
        if page > 0:
            await show_student_homework_menu(update, context, student, page=page-1)
        else:
            await query.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        return
    elif query.data == "student_homework_next":
        homeworks_data = db.get_homeworks_for_student_with_filter(student.id)
        # –ï—Å–ª–∏ –ø–æ–∫–∞–∑ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω –∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ
        if not student.show_old_homework and len(homeworks_data) > 1:
            homeworks_data = [homeworks_data[-1]]
        page = int(context.user_data.get('homework_page', 0))
        per_page = 5  # 4 —Å—Ç–∞—Ä—ã—Ö + 1 –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ
        total = len(homeworks_data)
        max_page = (total + per_page - 1) // per_page - 1
        if page < max_page:
            await show_student_homework_menu(update, context, student, page=page+1)
        else:
            await query.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
        return
    elif query.data == "student_roadmap":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–∞–¥–º–∞–ø –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—á–µ–Ω–∏–∫–∞
        await show_student_roadmap(update, context, student, page=int(context.user_data.get('roadmap_page', 0)))
        return
    elif query.data.startswith("roadmap_page_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ä–æ–∞–¥–º–∞–ø–∞
        page = int(query.data.split("_")[-1])
        context.user_data['roadmap_page'] = page
        await show_student_roadmap(update, context, student, page=page)
        return
    elif query.data == "student_homework_menu":
        buttons = [
            [InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data="student_homework")],
            [InlineKeyboardButton("üìÑ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="student_current_variant")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]
        ]
        await query.edit_message_text(
            text="üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return

async def handle_display_name_change(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏"""
    user_id = update.effective_user.id
    new_name = update.message.text
    
    student = context.bot_data['db'].get_student_by_telegram_id(user_id)
    if student:
        context.bot_data['db'].update_student_settings(student.id, display_name=new_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_message = await update.message.reply_text("‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        await student_menu(update, context)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        import asyncio
        await asyncio.sleep(2)
        await confirm_message.delete()
    
    return ConversationHandler.END

async def show_student_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞–º–∏"""
    query = update.callback_query
    
    keyboard = [
        [
            InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞", callback_data="student_add"),
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤", callback_data="student_list")
        ],
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="student_edit"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="student_delete")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]

async def handle_student_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        pass
    
    action, student_id = query.data.split("_")[1:]  # student_edit_123 -> ["student", "edit", "123"]
    
    if action == "edit":
        keyboard = [
            [
                InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"student_edit_name_{student_id}"),
                InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"student_edit_link_{student_id}")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]

async def handle_student_edit_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        pass
    
    parts = query.data.split("_")  # student_edit_link_123 -> ["student", "edit", "link", "123"]
    action = parts[2]
    student_id = int(parts[3])
    
    user_id = update.effective_user.id
    if user_id not in temp_data:
        temp_data[user_id] = {}
    temp_data[user_id]["student_id"] = student_id
    
    db = Database()
    student = db.get_student_by_id(student_id)
    
    if action == "link":
        await query.edit_message_text(
            text=f"üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —É—á–µ–Ω–∏–∫–∞:\n"
                 f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {student.lesson_link}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]])
        )
        return EDIT_LINK
    else:  # action == "name"
        await query.edit_message_text(
            text=f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞:\n"
                 f"–¢–µ–∫—É—â–µ–µ –∏–º—è: {student.name}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]])
        )
        return EDIT_NAME

async def handle_student_link_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —É—á–µ–Ω–∏–∫–∞"""
    user_id = update.effective_user.id
    if user_id not in temp_data or "student_id" not in temp_data[user_id]:
        await update.message.reply_text(
            text="‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return ConversationHandler.END
    
    student_id = temp_data[user_id]["student_id"]
    new_link = update.message.text
    
    db = Database()
    student = db.get_student_by_id(student_id)
    if not student:
        await update.message.reply_text(
            text="‚ùå –û—à–∏–±–∫–∞: —É—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return ConversationHandler.END
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.update_student_lesson_link(student_id, new_link)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text(
        text=f"‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
             f"üë§ –£—á–µ–Ω–∏–∫: {student.name}\n"
             f"üîó –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {new_link}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
        ]])
    )
    return ConversationHandler.END 

async def send_student_menu_by_chat_id(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> None:
    db = context.bot_data['db']
    student = db.get_student_by_telegram_id(chat_id)
    if not student:
        return
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    last_menu_id = db.get_student_menu_message_id(student.id)
    if last_menu_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=last_menu_id)
        except Exception as e:
            pass
    unread_count = len(db.get_notifications(student.id, only_unread=True))
    notif_text = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({unread_count})" if unread_count else "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    if student.exam_type.value == '–®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞':
        keyboard = [
            [InlineKeyboardButton("üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="student_homework")],
            [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—é", callback_data="student_join_lesson")],
            [InlineKeyboardButton("üìù –ö–æ–Ω—Å–ø–µ–∫—Ç—ã", callback_data="student_notes")],
            [
                InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="student_schedule"),
                InlineKeyboardButton(notif_text, callback_data="student_notifications")
            ],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="student_settings")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="student_homework_menu")],
            [InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—é", callback_data="student_join_lesson")],
            [
                InlineKeyboardButton("üìù –ö–æ–Ω—Å–ø–µ–∫—Ç—ã", callback_data="student_notes"),
                InlineKeyboardButton("üó∫Ô∏è –†–æ–∞–¥–º–∞–ø", callback_data="student_roadmap")
            ],
            [
                InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="student_schedule"),
                InlineKeyboardButton(notif_text, callback_data="student_notifications")
            ],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="student_settings")]
        ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    display_name = student.display_name or student.name
    greeting = f"üëã –ü—Ä–∏–≤–µ—Ç, {display_name}!"
    msg = await context.bot.send_message(chat_id=chat_id, text=greeting, reply_markup=reply_markup)
    db.update_student_menu_message_id(student.id, msg.message_id)

async def show_student_notes_menu(update, context, student, page=0):
    db = context.bot_data['db']
    student_notes = db.get_notes_for_student(student.id)
    if not student_notes:
        await update.callback_query.edit_message_text(
            text="üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
        )
        return
    per_page = 6  # 3 —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
    total = len(student_notes)
    max_page = (total + per_page - 1) // per_page - 1
    page = max(0, min(page, max_page))
    context.user_data['notes_page'] = page
    start = page * per_page
    end = start + per_page
    notes_on_page = student_notes[start:end]
    keyboard = []
    exam_emoji = {
        '–û–ì–≠': 'üìù',
        '–ï–ì–≠': 'üìö',
        '–®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞': 'üè´',
    }
    for i in range(0, len(notes_on_page), 2):
        row = []
        for j in range(2):
            if i + j < len(notes_on_page):
                note = notes_on_page[i + j]
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É —ç–∫–∑–∞–º–µ–Ω–∞
                emoji = exam_emoji.get(getattr(note, 'exam_type', ''), 'üìñ')
                # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)
                short_descr = note.title[:20] + ('‚Ä¶' if len(note.title) > 20 else '')
                button_text = f"{emoji} {short_descr}"
                row.append(InlineKeyboardButton(button_text, callback_data=f"student_note_{note.id}"))
        if row:
            keyboard.append(row)
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="student_notes_prev"))
    nav_row.append(InlineKeyboardButton(f"{page+1}/{max_page+1}", callback_data="noop"))
    if page < max_page:
        nav_row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="student_notes_next"))
    if len(nav_row) > 1:
        keyboard.append(nav_row)
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")])
    header = f"üìö <b>–í–∞—à–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã</b>\n"
    header += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    try:
        await update.callback_query.edit_message_text(
            text=header,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
    except Exception as e:
        if "Message is not modified" not in str(e):
            raise

async def show_student_homework_menu(update, context, student, page=0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π —É—á–µ–Ω–∏–∫–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    db = context.bot_data['db']
    homeworks_data = db.get_homeworks_for_student_with_filter(student.id)
    
    if not homeworks_data:
        await update.callback_query.edit_message_text(
            text="üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
        )
        return
    
    # –ï—Å–ª–∏ –ø–æ–∫–∞–∑ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω –∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ
    if not student.show_old_homework and len(homeworks_data) > 1:
        homeworks_data = [homeworks_data[-1]]  # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ (–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ) –∑–∞–¥–∞–Ω–∏–µ
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    all_homeworks = db.get_homeworks_for_student_with_filter(student.id)
    current_homework_id = all_homeworks[-1][0].id if all_homeworks else None
    
    # –û—Ç–¥–µ–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ
    old_homeworks = [hw for hw, _ in homeworks_data if hw.id != current_homework_id]
    current_homework = next((hw for hw, _ in homeworks_data if hw.id == current_homework_id), None)
    
    keyboard = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∏ –≤–∫–ª—é—á–µ–Ω –ø–æ–∫–∞–∑ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    if old_homeworks and student.show_old_homework:
        per_page = 4  # 4 —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        total_old = len(old_homeworks)
        max_page = (total_old + per_page - 1) // per_page - 1 if total_old > 0 else 0
        page = max(0, min(page, max_page))
        context.user_data['homework_page'] = page
        
        start = page * per_page
        end = start + per_page
        old_on_page = old_homeworks[start:end]
        
        # –°—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
        for i in range(0, len(old_on_page), 2):
            row = []
            for j in range(2):
                if i + j < len(old_on_page):
                    homework = old_on_page[i + j]
                    short_title = homework.title[:20] + ('‚Ä¶' if len(homework.title) > 20 else '')
                    button_text = f"üìö {short_title}"
                    row.append(InlineKeyboardButton(button_text, callback_data=f"student_hw_{homework.id}"))
            if row:
                keyboard.append(row)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="student_homework_prev"))
        nav_buttons.append(InlineKeyboardButton(f"{page+1}/{max_page+1}", callback_data="noop"))
        if end < total_old:
            nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="student_homework_next"))
        if nav_buttons:
            keyboard.append(nav_buttons)
    
    # –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É
    if current_homework:
        short_title = current_homework.title[:40] + ('‚Ä¶' if len(current_homework.title) > 40 else '')
        keyboard.append([InlineKeyboardButton(f"üÜï {short_title}", callback_data=f"student_hw_{current_homework.id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header = f"üìö <b>–í–∞—à–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>\n"
    if not student.show_old_homework and len(db.get_homeworks_for_student_with_filter(student.id)) > 1:
        header += "‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω–æ —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ\n"
    header += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    await update.callback_query.edit_message_text(
        text=header,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )

async def show_student_roadmap(update, context, student, page=0):
    db = context.bot_data['db']
    exam_type = student.exam_type
    exam_label = '–ï–ì–≠' if exam_type.value == '–ï–ì–≠' else '–û–ì–≠'
    
    # --- –†–æ–∞–¥–º–∞–ø –¥–ª—è –ï–ì–≠ ---
    if exam_type.value == '–ï–ì–≠':
        roadmap = [
            (1, 'üñäÔ∏è'), (4, 'üñäÔ∏è'), (11, 'üñäÔ∏èüíª'), (7, 'üñäÔ∏èüíª'), (10, 'üìù'), (3, 'üìä'), (18, 'üìä'), (22, 'üìä'),
            (9, 'üìäüíª'), ('Python', 'üêç'), (2, 'üêç'), (15, 'üêç'), (6, 'üêç'), (14, 'üêç'), (5, 'üêç'), (12, 'üêç'),
            (8, 'üêç'), (13, 'üêç'), (16, 'üêç'), (23, 'üêç'), ('19-21', 'üñäÔ∏èüíª'), (25, 'üêç'), (27, 'üêç'), (24, 'üêç'), (26, 'üìäüíª')
        ]
        real_statuses = db.get_homework_status_for_student(student.id, exam_type)
        tasks = []
        primary_score = 0
        for num, emoji in roadmap:
            status = real_statuses.get(num)
            if status == 'completed' or status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                status = '–ü—Ä–æ–π–¥–µ–Ω–æ'
            elif status == 'in_progress' or status == '–í –ø—Ä–æ—Ü–µ—Å—Å–µ':
                status = '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'
            else:
                status = '–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ'
            note_line = ''
            if status in ('–ü—Ä–æ–π–¥–µ–Ω–æ', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'):
                notes = db.get_notes_by_exam(exam_type)
                note = next((n for n in notes if n.get_task_number() == num), None)
                if note:
                    note_line = f"‚îî‚îÄ <a href='{note.link}'>–ö–æ–Ω—Å–ø–µ–∫—Ç</a>"
            if num in (26, 27):
                max_score = 2
            elif isinstance(num, int) and 1 <= num <= 25:
                max_score = 1
            else:
                max_score = 0
            if num == 'Python' or num == '19-21':
                title = f"{emoji} {num}"
            else:
                title = f"{emoji} –ó–∞–¥–∞–Ω–∏–µ {num}"
            if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                primary_score += max_score
                status_emoji = '‚úÖ'
            elif status == '–í –ø—Ä–æ—Ü–µ—Å—Å–µ':
                status_emoji = 'üîÑ'
            else:
                status_emoji = '‚ùå'
            status_text = f'{status} {status_emoji}'
            task_block = f"{title}\n"
            if note_line:
                task_block += note_line + "\n"
            task_block += f"‚îî‚îÄ –°—Ç–∞—Ç—É—Å: {status_text}"
            tasks.append(task_block)
        
        primary_to_test = {
            1: 7, 2: 14, 3: 20, 4: 27, 5: 34, 6: 40, 7: 43, 8: 46, 9: 48, 10: 51, 11: 54, 12: 56, 13: 59, 14: 62, 15: 64, 16: 67, 17: 70, 18: 72, 19: 75, 20: 78, 21: 80, 22: 83, 23: 85, 24: 88, 25: 90, 26: 93, 27: 95, 28: 98, 29: 100
        }
        test_score = primary_to_test.get(primary_score, 0)
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        per_page = 5
        total_pages = (len(tasks) - 1) // per_page + 1
        start = page * per_page
        end = start + per_page
        page_tasks = tasks[start:end]
        tasks_text = "\n\n".join(page_tasks)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"roadmap_page_{page-1}"))
        nav_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="noop"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"roadmap_page_{page+1}"))
        
        progress_text = (
            f"<b>–†–æ–∞–¥–º–∞–ø –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"<b>üèÖ –ü–µ—Ä–≤–∏—á–Ω—ã–π –±–∞–ª–ª: {primary_score}</b>\n"
            f"<b>üéØ –¢–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–ª: {test_score}</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"{tasks_text}"
        )
        
    # --- –†–æ–∞–¥–º–∞–ø –¥–ª—è –û–ì–≠ ---
    elif exam_type.value == '–û–ì–≠':
        roadmap = [
            (1, 'üñäÔ∏è'), (2, 'üñäÔ∏è'), (4, 'üñäÔ∏è'), (9, 'üñäÔ∏è'), (7, 'üñäÔ∏è'), (8, 'üñäÔ∏è'), (10, 'üñäÔ∏è'), (5, 'üñäÔ∏è'), (3, 'üñäÔ∏è'), (6, 'üñäÔ∏è'),
            (11, 'üìÅ'), (12, 'üìÅ'), ('13.1', 'üóÇÔ∏è'), ('13.2', 'üóÇÔ∏è'), (14, 'üóÇÔ∏è'), (15, 'üêç'), ('Python', 'üêç'), (16, 'üêç')
        ]
        real_statuses = db.get_homework_status_for_student(student.id, exam_type)
        tasks = []
        score = 0
        passed_13 = False
        for num, emoji in roadmap:
            status = real_statuses.get(num)
            if status == 'completed' or status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                status = '–ü—Ä–æ–π–¥–µ–Ω–æ'
            elif status == 'in_progress' or status == '–í –ø—Ä–æ—Ü–µ—Å—Å–µ':
                status = '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'
            else:
                status = '–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ'
            note_line = ''
            if status in ('–ü—Ä–æ–π–¥–µ–Ω–æ', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'):
                notes = db.get_notes_by_exam(exam_type)
                note = next((n for n in notes if n.get_task_number() == num), None)
                if note:
                    note_line = f"‚îî‚îÄ <a href='{note.link}'>–ö–æ–Ω—Å–ø–µ–∫—Ç</a>"
            if num == 'Python':
                title = f"{emoji} Python"
                if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                    score += 2
            elif num in ('13.1', '13.2'):
                title = f"{emoji} –ó–∞–¥–∞–Ω–∏–µ {num}"
                if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                    passed_13 = True
            elif num == 14:
                title = f"{emoji} –ó–∞–¥–∞–Ω–∏–µ {num}"
                if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                    score += 3
            elif num in (15, 16):
                title = f"{emoji} –ó–∞–¥–∞–Ω–∏–µ {num}"
                if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                    score += 2
            else:
                title = f"{emoji} –ó–∞–¥–∞–Ω–∏–µ {num}"
                if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                    score += 1
            if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                status_emoji = '‚úÖ'
            elif status == '–í –ø—Ä–æ—Ü–µ—Å—Å–µ':
                status_emoji = 'üîÑ'
            else:
                status_emoji = '‚ùå'
            status_text = f'{status} {status_emoji}'
            task_block = f"{title}\n"
            if note_line:
                task_block += note_line + "\n"
            task_block += f"‚îî‚îÄ –°—Ç–∞—Ç—É—Å: {status_text}"
            tasks.append(task_block)
        
        if passed_13:
            score += 2
        if score <= 4:
            grade = '2'
        elif score <= 10:
            grade = '3'
        elif score <= 16:
            grade = '4'
        else:
            grade = '5'
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        per_page = 5
        total_pages = (len(tasks) - 1) // per_page + 1
        start = page * per_page
        end = start + per_page
        page_tasks = tasks[start:end]
        tasks_text = "\n\n".join(page_tasks)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"roadmap_page_{page-1}"))
        nav_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="noop"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"roadmap_page_{page+1}"))
        
        progress_text = (
            f"<b>–í–∞—à —Ä–æ–∞–¥–º–∞–ø –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"<b>üèÖ –¢–µ–∫—É—â–∏–π –±–∞–ª–ª: {score}</b>\n"
            f"<b>üìä –û—Ü–µ–Ω–∫–∞: {grade}</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"{tasks_text}"
        )
    else:
        progress_text = "–†–æ–∞–¥–º–∞–ø –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –û–ì–≠ –∏ –ï–ì–≠."
        nav_buttons = []
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    if nav_buttons:
        keyboard.append(nav_buttons)
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")])
    
    await update.callback_query.edit_message_text(
        text=progress_text,
        parse_mode='HTML',
        disable_web_page_preview=True,
        reply_markup=InlineKeyboardMarkup(keyboard)
    ) 