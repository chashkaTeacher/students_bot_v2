from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from core.database import Database
from telegram.constants import ParseMode
import os
import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ENTER_PASSWORD = 0
ENTER_DISPLAY_NAME = 1

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
user_settings = {}

async def get_user_settings(user_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    if user_id not in user_settings:
        user_settings[user_id] = {
            "display_name": None,
            "greeting": None
        }
    return user_settings[user_id]

async def student_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    user_id = update.effective_user.id
    student = context.bot_data['db'].get_student_by_telegram_id(user_id)
    db = context.bot_data['db']
    unread_count = len(db.get_notifications(student.id, only_unread=True)) if student else 0
    notif_text = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({unread_count})" if unread_count else "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    
    keyboard = [
        [
            InlineKeyboardButton("üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="student_homework")
        ],
        [
            InlineKeyboardButton("üìù –ö–æ–Ω—Å–ø–µ–∫—Ç—ã", callback_data="student_notes")
        ],
        [
            InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="student_schedule"),
            InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—é", callback_data="student_join_lesson")
        ],
        [
            InlineKeyboardButton("üìÑ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="student_current_variant")
        ],
        [
            InlineKeyboardButton(notif_text, callback_data="student_notifications")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="student_settings")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    display_name = student.display_name or student.name
    greeting = f"üëã –ü—Ä–∏–≤–µ—Ç, {display_name}!"
    
    if update.callback_query:
        msg = await update.callback_query.edit_message_text(
            text=greeting,
            reply_markup=reply_markup
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ –±–∞–∑–µ
        db.update_student_menu_message_id(student.id, msg.message_id)
    else:
        msg = await update.message.reply_text(
            text=greeting,
            reply_markup=reply_markup
        )
        db.update_student_menu_message_id(student.id, msg.message_id)

async def show_settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = update.effective_user.id
    student = context.bot_data['db'].get_student_by_telegram_id(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    show_old_text = "üëÅÔ∏è –°–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è" if student.show_old_homework else "üëÅÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è"
    
    keyboard = [
        [
            InlineKeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è", callback_data="student_change_name")
        ],
        [
            InlineKeyboardButton(show_old_text, callback_data="student_toggle_old_homework")
        ],
        [
            InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="student_reset_settings")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=reply_markup
    )

async def handle_password(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è"""
    db: Database = context.bot_data['db']
    password = update.message.text
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    student = db.get_student_by_password(password)
    if student:
        # –û–±–Ω–æ–≤–ª—è–µ–º Telegram ID —Å—Ç—É–¥–µ–Ω—Ç–∞
        db.update_student_telegram_id(student.id, user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞
        await student_menu(update, context)
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return ENTER_PASSWORD

async def handle_student_actions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None | int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    query = update.callback_query
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –æ—à–∏–±–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ callback query
    try:
        await query.answer()
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ query
        pass
    
    db: Database = context.bot_data['db']
    user_id = query.from_user.id
    student = db.get_student_by_telegram_id(user_id)

    if query.data == "student_homework":
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        homeworks_data = db.get_homeworks_for_student_with_filter(student.id)
        
        if not homeworks_data:
            await query.edit_message_text(
                text="üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
        keyboard = []
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å—Ç–∞—Ä—ã–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        if len(homeworks_data) > 1:
            old_homeworks = homeworks_data[:-1]  # –í—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
            current_homework = homeworks_data[-1]  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ (–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ 2 –≤ —Ä—è–¥
            for i in range(0, len(old_homeworks), 2):
                row = []
                for j in range(2):
                    if i + j < len(old_homeworks):
                        homework, _ = old_homeworks[i + j]
                        button_text = f"üìö {homework.title[:25]}{'...' if len(homework.title) > 25 else ''}"
                        row.append(InlineKeyboardButton(button_text, callback_data=f"student_hw_{homework.id}"))
                keyboard.append(row)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –≤–Ω–∏–∑—É
            current_hw, _ = current_homework
            keyboard.append([InlineKeyboardButton(f"üÜï {current_hw.title}", callback_data=f"student_hw_{current_hw.id}")])
        else:
            # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ
            homework, _ = homeworks_data[0]
            keyboard.append([InlineKeyboardButton(f"üÜï {homework.title}", callback_data=f"student_hw_{homework.id}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
        settings_info = ""
        if not student.show_old_homework and len(homeworks_data) > 1:
            settings_info = "\n\n‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω–æ —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –í–∫–ª—é—á–∏—Ç–µ –ø–æ–∫–∞–∑ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ."
        
        await query.edit_message_text(
            text=f"üìö –í–∞—à–∏ –≤—ã–¥–∞–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:{settings_info}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    elif query.data.startswith("student_hw_file_"):
        hw_id = int(query.data.split("_")[-1])
        hw = db.get_homework_by_id(hw_id)
        if not hw:
            await query.message.reply_text(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (id={hw_id})")
        elif not hw.file_path:
            await query.message.reply_text(f"‚ùå –£ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç —Ñ–∞–π–ª–∞ (id={hw_id})")
        else:
            abs_path = os.path.abspath(os.path.normpath(hw.file_path))
            if not os.path.exists(abs_path):
                await query.message.reply_text(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {abs_path}")
            else:
                # –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –º–µ–Ω—é (–∑–∞–º–µ–Ω—è–µ–º –Ω–∞ "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞...")
                try:
                    await query.edit_message_text(text="‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞...")
                except Exception as e:
                    if "Message is not modified" not in str(e):
                        raise
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                try:
                    await query.message.reply_document(document=abs_path, caption=f"üìù {hw.title}")
                except Exception as e:
                    await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
                # –ü–æ—Å–ª–µ —Ñ–∞–π–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                buttons = [[InlineKeyboardButton("–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ", url=hw.link)]]
                if hw and hw.file_path:
                    buttons.append([InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"student_hw_file_{hw_id}")])
                buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_homework")])
                await query.message.reply_text(
                    text=f"üìù <b>{hw.title}</b>",
                    reply_markup=InlineKeyboardMarkup(buttons),
                    parse_mode=ParseMode.HTML
                )
        return
    elif query.data.startswith("student_hw_"):
        hw_id = int(query.data.split("_")[-1])
        hw = db.get_homework_by_id(hw_id)
        if not hw:
            await query.edit_message_text(
                text="‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_homework")]])
            )
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º (–ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ —Å–ø–∏—Å–∫–µ)
        homeworks_data = db.get_homeworks_for_student_with_filter(student.id)
        is_current = False
        if homeworks_data:
            is_current = homeworks_data[-1][0].id == hw_id
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Å—Ç–∞—Ç—É—Å–æ–º
        status_text = "üÜï –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ" if is_current else "üìö –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
        
        buttons = [[InlineKeyboardButton("–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ", url=hw.link)]]
        if hw.file_path:
            buttons.append([InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data=f"student_hw_file_{hw_id}")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_homework")])
        
        await query.edit_message_text(
            text=f"üìù <b>{hw.title}</b>\n\n{status_text}",
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.HTML
        )
        return
    elif query.data == "student_notes":
        await query.edit_message_text(
            text="üìù –†–∞–∑–¥–µ–ª –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")
            ]])
        )
    elif query.data == "student_schedule":
        await query.edit_message_text(
            text="üìÖ –†–∞–∑–¥–µ–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")
            ]])
        )
    elif query.data == "student_join_lesson":
        if student and student.lesson_link:
            await query.edit_message_text(
                text=f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à–µ –∑–∞–Ω—è—Ç–∏–µ:\n{student.lesson_link}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")
                ]])
            )
        else:
            await query.edit_message_text(
                text="‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")
                ]])
            )
    elif query.data == "student_current_variant":
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ —ç–∫–∑–∞–º–µ–Ω—É —É—á–µ–Ω–∏–∫–∞
        if not student or not student.exam_type:
            await query.edit_message_text(
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
            )
            return
        variant = db.get_latest_variant(student.exam_type)
        if not variant:
            await query.edit_message_text(
                text="üìÑ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∫–∞ –Ω–µ –≤—ã–¥–∞–Ω.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
            )
            return
        # –û—Ñ–æ—Ä–º–ª—è–µ–º –¥–∞—Ç—É –≤—ã–¥–∞—á–∏
        issued_date = variant.created_at.strftime('%d.%m.%Y') if variant.created_at else "-"
        # –í—ã—á–∏—Å–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        dt = variant.created_at or datetime.datetime.now()
        days_ahead = 0 if dt.weekday() == 0 else 7 - dt.weekday()
        next_monday = dt + datetime.timedelta(days=days_ahead)
        deadline = next_monday.strftime('%d.%m.%Y')
        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = (
            "üìÑ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç</b>\n\n"
            f"üóìÔ∏è –í—ã–¥–∞–Ω: {issued_date}\n"
            f"‚è∞ –î–µ–¥–ª–∞–π–Ω: {deadline} (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî <a href=\"https://t.me/ChashkaDurashka\">–ø–∏—à–∏ –°–∞—à–µ</a>."
        )
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç", url=variant.link)],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]
            ]),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=False
        )
        return
    elif query.data == "student_settings":
        await show_settings_menu(update, context)
    elif query.data == "student_change_name":
        await query.edit_message_text(
            text="üë§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="student_back_to_settings")
            ]])
        )
        return ENTER_DISPLAY_NAME
    elif query.data == "student_reset_settings":
        if student:
            context.bot_data['db'].reset_student_settings(student.id)
            await query.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!")
        await student_menu(update, context)
    elif query.data == "student_toggle_old_homework":
        if student:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            new_setting = not student.show_old_homework
            context.bot_data['db'].update_student_show_old_homework(student.id, new_setting)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await show_settings_menu(update, context)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            status_text = "–≤–∫–ª—é—á–µ–Ω" if new_setting else "–æ—Ç–∫–ª—é—á–µ–Ω"
            await query.answer(f"‚úÖ –ü–æ–∫–∞–∑ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π {status_text}!")
        return
    elif query.data == "student_back_to_settings":
        await show_settings_menu(update, context)
    elif query.data == "student_back":
        await student_menu(update, context)
    elif query.data == "student_notifications":
        # –°–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        context.user_data['notif_page'] = 0
        notifications = db.get_notifications(student.id)
        if not notifications:
            await query.edit_message_text(
                text="üîî –ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
            )
            return
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        page = int(context.user_data.get('notif_page', 0))
        per_page = 5
        total = len(notifications)
        start = page * per_page
        end = start + per_page
        page_notifications = notifications[start:end]
        notif_texts = []
        for i, notif in enumerate(page_notifications, 1):
            status = "üÜï " if not notif.is_read else "üìã "
            dt = notif.created_at.strftime('%d.%m.%Y –≤ %H:%M') if notif.created_at else ""
            # –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ —Å —ç–º–æ–¥–∑–∏
            if notif.type == 'homework':
                notif_type = "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
            elif notif.type == 'variant':
                notif_type = "üìÑ –í–∞—Ä–∏–∞–Ω—Ç"
            else:
                notif_type = "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            text = f"<b>{status}{notif_type}</b>\n"
            text += f"üìÖ <i>{dt}</i>\n"
            text += f"üìù {notif.text}"
            
            if notif.link:
                text += f"\nüîó <a href='{notif.link}'>–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É</a>"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(page_notifications):
                text += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            
            notif_texts.append(text)
        
        text = "\n\n".join(notif_texts)
        db.mark_notifications_read(student.id)
        nav_buttons = []
        if start > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="notif_prev"))
        if end < total:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data="notif_next"))
        buttons = []
        if nav_buttons:
            buttons.append(nav_buttons)
        buttons.append([InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="notif_clear")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")])
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
        header = f"üîî <b>–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        header += f"üìä –í—Å–µ–≥–æ: {total} | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {(total + per_page - 1) // per_page}\n"
        header += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        
        await query.edit_message_text(
            text=header + text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=False
        )
        return
    elif query.data == "notif_next":
        context.user_data['notif_page'] = context.user_data.get('notif_page', 0) + 1
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        notifications = db.get_notifications(student.id)
        if not notifications:
            await query.edit_message_text(
                text="üîî –ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
            )
            return
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        page = int(context.user_data.get('notif_page', 0))
        per_page = 5
        total = len(notifications)
        start = page * per_page
        end = start + per_page
        page_notifications = notifications[start:end]
        notif_texts = []
        for i, notif in enumerate(page_notifications, 1):
            status = "üÜï " if not notif.is_read else "üìã "
            dt = notif.created_at.strftime('%d.%m.%Y –≤ %H:%M') if notif.created_at else ""
            # –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ —Å —ç–º–æ–¥–∑–∏
            if notif.type == 'homework':
                notif_type = "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
            elif notif.type == 'variant':
                notif_type = "üìÑ –í–∞—Ä–∏–∞–Ω—Ç"
            else:
                notif_type = "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            text = f"<b>{status}{notif_type}</b>\n"
            text += f"üìÖ <i>{dt}</i>\n"
            text += f"üìù {notif.text}"
            
            if notif.link:
                text += f"\nüîó <a href='{notif.link}'>–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É</a>"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(page_notifications):
                text += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            
            notif_texts.append(text)
        
        text = "\n\n".join(notif_texts)
        db.mark_notifications_read(student.id)
        nav_buttons = []
        if start > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="notif_prev"))
        if end < total:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data="notif_next"))
        buttons = []
        if nav_buttons:
            buttons.append(nav_buttons)
        buttons.append([InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="notif_clear")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")])
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
        header = f"üîî <b>–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        header += f"üìä –í—Å–µ–≥–æ: {total} | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {(total + per_page - 1) // per_page}\n"
        header += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        
        await query.edit_message_text(
            text=header + text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=False
        )
        return
    elif query.data == "notif_prev":
        context.user_data['notif_page'] = max(0, context.user_data.get('notif_page', 0) - 1)
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        notifications = db.get_notifications(student.id)
        if not notifications:
            await query.edit_message_text(
                text="üîî –ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
            )
            return
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        page = int(context.user_data.get('notif_page', 0))
        per_page = 5
        total = len(notifications)
        start = page * per_page
        end = start + per_page
        page_notifications = notifications[start:end]
        notif_texts = []
        for i, notif in enumerate(page_notifications, 1):
            status = "üÜï " if not notif.is_read else "üìã "
            dt = notif.created_at.strftime('%d.%m.%Y –≤ %H:%M') if notif.created_at else ""
            # –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ —Å —ç–º–æ–¥–∑–∏
            if notif.type == 'homework':
                notif_type = "üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"
            elif notif.type == 'variant':
                notif_type = "üìÑ –í–∞—Ä–∏–∞–Ω—Ç"
            else:
                notif_type = "üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            text = f"<b>{status}{notif_type}</b>\n"
            text += f"üìÖ <i>{dt}</i>\n"
            text += f"üìù {notif.text}"
            
            if notif.link:
                text += f"\nüîó <a href='{notif.link}'>–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É</a>"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < len(page_notifications):
                text += "\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            
            notif_texts.append(text)
        
        text = "\n\n".join(notif_texts)
        db.mark_notifications_read(student.id)
        nav_buttons = []
        if start > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="notif_prev"))
        if end < total:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data="notif_next"))
        buttons = []
        if nav_buttons:
            buttons.append(nav_buttons)
        buttons.append([InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="notif_clear")])
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")])
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
        header = f"üîî <b>–í–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        header += f"üìä –í—Å–µ–≥–æ: {total} | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {(total + per_page - 1) // per_page}\n"
        header += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        
        await query.edit_message_text(
            text=header + text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=False
        )
        return
    elif query.data == "notif_clear":
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –±–∞–∑—ã
        db.clear_notifications(student.id)
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
        push_msgs = db.get_push_messages(student.id)
        for push in push_msgs:
            try:
                await context.bot.delete_message(chat_id=student.telegram_id, message_id=push.message_id)
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)
        db.clear_push_messages(student.id)
        context.user_data['notif_page'] = 0
        await query.edit_message_text(
            text="üîî –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="student_back")]])
        )
        return

async def handle_display_name_change(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏"""
    user_id = update.effective_user.id
    new_name = update.message.text
    
    student = context.bot_data['db'].get_student_by_telegram_id(user_id)
    if student:
        context.bot_data['db'].update_student_settings(student.id, display_name=new_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_message = await update.message.reply_text("‚úÖ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
        await student_menu(update, context)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        import asyncio
        await asyncio.sleep(2)
        await confirm_message.delete()
    
    return ConversationHandler.END

async def show_student_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞–º–∏"""
    query = update.callback_query
    
    keyboard = [
        [
            InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞", callback_data="student_add"),
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤", callback_data="student_list")
        ],
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="student_edit"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="student_delete")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]

async def handle_student_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –æ—à–∏–±–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ callback query
    try:
        await query.answer()
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ query
        pass
    
    action, student_id = query.data.split("_")[1:]  # student_edit_123 -> ["student", "edit", "123"]
    
    if action == "edit":
        keyboard = [
            [
                InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"student_edit_name_{student_id}"),
                InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"student_edit_link_{student_id}")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]

async def handle_student_edit_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    query = update.callback_query
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –æ—à–∏–±–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ callback query
    try:
        await query.answer()
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ query
        pass
    
    parts = query.data.split("_")  # student_edit_link_123 -> ["student", "edit", "link", "123"]
    action = parts[2]
    student_id = int(parts[3])
    
    user_id = update.effective_user.id
    if user_id not in temp_data:
        temp_data[user_id] = {}
    temp_data[user_id]["student_id"] = student_id
    
    db = Database()
    student = db.get_student_by_id(student_id)
    
    if action == "link":
        await query.edit_message_text(
            text=f"üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —É—á–µ–Ω–∏–∫–∞:\n"
                 f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {student.lesson_link}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]])
        )
        return EDIT_LINK
    else:  # action == "name"
        await query.edit_message_text(
            text=f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞:\n"
                 f"–¢–µ–∫—É—â–µ–µ –∏–º—è: {student.name}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]])
        )
        return EDIT_NAME

async def handle_student_link_edit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —É—á–µ–Ω–∏–∫–∞"""
    user_id = update.effective_user.id
    if user_id not in temp_data or "student_id" not in temp_data[user_id]:
        await update.message.reply_text(
            text="‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return ConversationHandler.END
    
    student_id = temp_data[user_id]["student_id"]
    new_link = update.message.text
    
    db = Database()
    student = db.get_student_by_id(student_id)
    if not student:
        await update.message.reply_text(
            text="‚ùå –û—à–∏–±–∫–∞: —É—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return ConversationHandler.END
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.update_student_lesson_link(student_id, new_link)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text(
        text=f"‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
             f"üë§ –£—á–µ–Ω–∏–∫: {student.name}\n"
             f"üîó –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {new_link}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
        ]])
    )
    return ConversationHandler.END

async def send_student_menu_by_chat_id(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ chat_id (–±–µ–∑ update), —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å"""
    db = context.bot_data['db']
    student = db.get_student_by_telegram_id(chat_id)
    if not student:
        return
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    last_menu_id = db.get_student_menu_message_id(student.id)
    if last_menu_id:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=last_menu_id)
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
            pass
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    unread_count = len(db.get_notifications(student.id, only_unread=True))
    notif_text = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({unread_count})" if unread_count else "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    keyboard = [
        [InlineKeyboardButton("üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="student_homework")],
        [InlineKeyboardButton("üìù –ö–æ–Ω—Å–ø–µ–∫—Ç—ã", callback_data="student_notes")],
        [InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="student_schedule"), InlineKeyboardButton("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—é", callback_data="student_join_lesson")],
        [InlineKeyboardButton("üìÑ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="student_current_variant")],
        [InlineKeyboardButton(notif_text, callback_data="student_notifications")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="student_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    display_name = student.display_name or student.name
    greeting = f"üëã –ü—Ä–∏–≤–µ—Ç, {display_name}!"
    msg = await context.bot.send_message(chat_id=chat_id, text=greeting, reply_markup=reply_markup)
    db.update_student_menu_message_id(student.id, msg.message_id) 