from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from core.database import Database, ExamType, is_valid_url
from telegram.error import BadRequest
from handlers.admin_handlers import admin_menu
import os
from datetime import datetime
import logging

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSE_EXAM, ENTER_TITLE, ENTER_LINK, CONFIRM_DELETE, SELECT_NOTE, EDIT_TITLE, EDIT_LINK, ASK_FOR_FILE, WAIT_FOR_FILE = range(9)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
temp_data = {}

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
NOTES_FILES_DIR = "notes_files"

if not os.path.exists(NOTES_FILES_DIR):
    os.makedirs(NOTES_FILES_DIR)

async def safe_answer_query(query):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        await query.answer()
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ query
        pass

async def show_notes_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º–∏"""
    query = update.callback_query
    
    if query and query.data != "admin_notes":
        action = query.data.split("_")[1]  # notes_add -> add
        await safe_answer_query(query)
        return await show_exam_menu(update, context, action)
    
    keyboard = [
        [
            InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç", callback_data="notes_add"),
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤", callback_data="notes_list")
        ],
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="notes_edit"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="notes_delete")
        ],
        [
            InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–≤—ã–¥–∞–Ω–Ω—ã–µ", callback_data="admin_check_unassigned_notes")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.message.edit_text(
            "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º–∏\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º–∏\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    return ConversationHandler.END

async def show_exam_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —ç–∫–∑–∞–º–µ–Ω–∞"""
    query = update.callback_query
    await safe_answer_query(query)
    
    user_id = update.effective_user.id
    temp_data[user_id] = {"action": action}
    
    keyboard = [
        [
            InlineKeyboardButton("üìù –û–ì–≠", callback_data="notes_exam_OGE"),
            InlineKeyboardButton("üéì –ï–ì–≠", callback_data="notes_exam_EGE"),
            InlineKeyboardButton("üìñ –®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="notes_exam_SCHOOL")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    actions = {
        "add": "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
        "list": "–ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
        "edit": "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "delete": "—É–¥–∞–ª–µ–Ω–∏—è"
    }
    
    await query.edit_message_text(
        text=f"üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞ –¥–ª—è {actions.get(action, '')} –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤:",
        reply_markup=reply_markup
    )
    
    return CHOOSE_EXAM

async def handle_exam_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —ç–∫–∑–∞–º–µ–Ω–∞"""
    query = update.callback_query
    await safe_answer_query(query)
    
    user_id = update.effective_user.id
    exam_type = query.data.split("_")[-1]
    action = temp_data[user_id]["action"]
    temp_data[user_id]["exam_type"] = exam_type
    
    db = Database()
    
    if action == "add":
        await query.edit_message_text(
            text="üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]])
        )
        return ENTER_TITLE
    
    elif action in ["list", "edit", "delete"]:
        notes = db.get_notes_by_exam(exam_type)
        if not notes:
            await query.edit_message_text(
                text=f"‚ùå –ù–µ—Ç –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ –¥–ª—è {ExamType[exam_type].value}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
                ]])
            )
            return ConversationHandler.END
        
        if action == "list":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            temp_data[user_id]["notes"] = notes
            temp_data[user_id]["current_page"] = 0
            await show_notes_page(update, context, user_id)
            return SELECT_NOTE
        
        # –î–ª—è edit –∏ delete —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ –¥–≤–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –≤ —Å—Ç—Ä–æ–∫—É
        keyboard = []
        current_row = []
        
        for note in notes:
            icon = "‚úèÔ∏è" if action == "edit" else "‚ùå"
            button_text = f"{icon} {note.title}"
            button = InlineKeyboardButton(
                button_text, 
                callback_data=f"notes_{action}_{note.id}"
            )
            
            # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            if len(note.title) > 15:
                if current_row:  # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                    keyboard.append(current_row)
                    current_row = []
                keyboard.append([button])  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
            else:
                current_row.append(button)
                if len(current_row) == 2:  # –ï—Å–ª–∏ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏
                    keyboard.append(current_row)
                    current_row = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if current_row:
            keyboard.append(current_row)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        actions = {
            "edit": "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "delete": "—É–¥–∞–ª–µ–Ω–∏—è"
        }
        
        await query.edit_message_text(
            text=f"üìã –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ –¥–ª—è {ExamType[exam_type].value}\n"
                 f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Å–ø–µ–∫—Ç –¥–ª—è {actions.get(action, '')}:",
            reply_markup=reply_markup
        )
        return SELECT_NOTE if action in ["edit", "delete"] else ConversationHandler.END

async def handle_note_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞"""
    user_id = update.effective_user.id
    temp_data[user_id]["title"] = update.message.text
    
    await update.message.reply_text(
        text="üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
        ]])
    )
    return ENTER_LINK

async def handle_note_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç"""
    user_id = update.effective_user.id
    link = update.message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not is_valid_url(link):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n\n"
            "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ https://example.com\n"
            "‚Ä¢ http://example.com\n"
            "‚Ä¢ https://t.me/username\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ENTER_LINK
    
    temp_data[user_id]["link"] = link
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="notes_file_yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="notes_file_no")
        ]
    ]
    
    await update.message.reply_text(
        text="üìé –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∫ –∫–æ–Ω—Å–ø–µ–∫—Ç—É?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ASK_FOR_FILE

async def handle_file_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
    query = update.callback_query
    await safe_answer_query(query)
    
    user_id = update.effective_user.id
    data = temp_data[user_id]
    
    if query.data == "notes_file_yes":
        await query.edit_message_text(
            text="üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–º:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]])
        )
        return WAIT_FOR_FILE
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç –±–µ–∑ —Ñ–∞–π–ª–∞
        db = Database()
        success = db.add_note(data["title"], data["link"], data["exam_type"])
        
        if not success:
            await query.edit_message_text(
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞.\n"
                     "–í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω—Å–ø–µ–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
                ]])
            )
            return ConversationHandler.END
        
        await query.edit_message_text(
            text="‚úÖ –ö–æ–Ω—Å–ø–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                 f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
                 f"üìö –≠–∫–∑–∞–º–µ–Ω: {ExamType[data['exam_type']].value}\n"
                 f"üîó –°—Å—ã–ª–∫–∞: {data['link']}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return ConversationHandler.END

async def handle_file_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞"""
    user_id = update.effective_user.id
    
    if user_id not in temp_data:
        await update.message.reply_text(
            text="‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Å–ø–µ–∫—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return ConversationHandler.END
    
    data = temp_data[user_id]
    note_id = data.get("note_id")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    file = update.message.document
    file_name = file.file_name
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    unique_filename = f"{timestamp}_{file_name}"
    file_path = os.path.join(NOTES_FILES_DIR, unique_filename)
    
    try:
        new_file = await file.get_file()
        await new_file.download_to_drive(file_path)
        
        db = context.bot_data['db']
        
        if not note_id:  # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
            success = db.add_note(
                data["title"],
                data["link"],
                data["exam_type"],
                file_path
            )
            
            if not success:
                if os.path.exists(file_path):
                    os.remove(file_path)
                await update.message.reply_text(
                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞.\n"
                         "–í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω—Å–ø–µ–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
                    ]])
                )
                return ConversationHandler.END
            
            await update.message.reply_text(
                text="‚úÖ –ö–æ–Ω—Å–ø–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                     f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
                     f"üìö –≠–∫–∑–∞–º–µ–Ω: {ExamType[data['exam_type']].value}\n"
                     f"üîó –°—Å—ã–ª–∫–∞: {data['link']}\n"
                     f"üìé –§–∞–π–ª: {file_name}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
                ]])
            )
            return ConversationHandler.END
        
        else:  # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
            note = db.get_note_by_id(note_id)
            
            if not note:
                if os.path.exists(file_path):
                    os.remove(file_path)
                await update.message.reply_text(
                    text="‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Å–ø–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
                    ]])
                )
                return ConversationHandler.END
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if note.file_path and os.path.exists(note.file_path):
                try:
                    os.remove(note.file_path)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            success = db.update_note(
                note_id,
                title=note.title,
                link=note.link,
                exam_type=note.exam_type,
                file_path=file_path
            )
            
            if not success:
                if os.path.exists(file_path):
                    os.remove(file_path)
                await update.message.reply_text(
                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
                    ]])
                )
                return ConversationHandler.END
            
            await update.message.reply_text(
                text=f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–æ–Ω—Å–ø–µ–∫—Ç—É!\n\n"
                     f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {note.title}\n"
                     f"üìé –§–∞–π–ª: {file_name}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
                ]])
            )
            return ConversationHandler.END
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        if os.path.exists(file_path):
            os.remove(file_path)
        await update.message.reply_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return ConversationHandler.END

async def handle_note_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await safe_answer_query(query)
    
    action, note_id = query.data.split("_")[1:]
    user_id = update.effective_user.id
    temp_data[user_id]["note_id"] = int(note_id)
    
    db = context.bot_data['db']
    note = db.get_note_by_id(int(note_id))
    
    if action == "edit":
        keyboard = [
            [
                InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"notes_edit_title_{note_id}"),
                InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"notes_edit_link_{note_id}")
            ],
            [InlineKeyboardButton("üìé –î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data=f"notes_edit_file_{note_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        
        file_info = ""
        if note.file_path:
            file_name = os.path.basename(note.file_path)
            file_info = f"üìé –§–∞–π–ª: {file_name}\n"
        
        await query.edit_message_text(
            text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞:\n\n"
                 f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {note.title}\n"
                 f"üìö –≠–∫–∑–∞–º–µ–Ω: {note.exam_type.value}\n"
                 f"üîó –°—Å—ã–ª–∫–∞: {note.link}\n"
                 f"{file_info}\n"
                 f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SELECT_NOTE
    
    elif action == "delete":
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"notes_confirm_delete_{note_id}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]
        ]
        
        file_info = ""
        if note.file_path:
            file_name = os.path.basename(note.file_path)
            file_info = f"üìé –§–∞–π–ª: {file_name}\n"
        
        await query.edit_message_text(
            text=f"‚ùóÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç?\n\n"
                 f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {note.title}\n"
                 f"üìö –≠–∫–∑–∞–º–µ–Ω: {note.exam_type.value}\n"
                 f"üîó –°—Å—ã–ª–∫–∞: {note.link}\n"
                 f"{file_info}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CONFIRM_DELETE

async def handle_edit_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    query = update.callback_query
    await safe_answer_query(query)
    
    parts = query.data.split("_")  # notes_edit_link_123 -> ["notes", "edit", "link", "123"]
    action = parts[2]
    note_id = int(parts[3])
    
    user_id = update.effective_user.id
    if user_id not in temp_data:
        temp_data[user_id] = {}
    temp_data[user_id]["note_id"] = note_id
    
    db = Database()
    note = db.get_note_by_id(note_id)
    
    if action == "file":
        await query.edit_message_text(
            text="üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]])
        )
        return WAIT_FOR_FILE
    
    if action == "link":
        await query.edit_message_text(
            text=f"üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É:\n"
                 f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {note.link}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]]),
            disable_web_page_preview=True
        )
        return EDIT_LINK
    else:  # action == "title"
        await query.edit_message_text(
            text=f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n"
                 f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {note.title}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]]),
            disable_web_page_preview=True
        )
        return EDIT_TITLE

async def handle_edit_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞"""
    user_id = update.effective_user.id
    note_id = temp_data[user_id]["note_id"]
    new_title = update.message.text
    
    db = Database()
    note = db.get_note_by_id(note_id)
    
    if not note:
        await update.message.reply_text(
            text="‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Å–ø–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return ConversationHandler.END
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    success = db.update_note(
        note_id,
        title=new_title,
        link=note.link,
        exam_type=note.exam_type,
        file_path=note.file_path
    )
    
    if not success:
        await update.message.reply_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return ConversationHandler.END
    
    await update.message.reply_text(
        text=f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
             f"üìù –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {new_title}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
        ]])
    )
    return ConversationHandler.END

async def handle_note_edit_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç"""
    user_id = update.effective_user.id
    if user_id not in temp_data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return ConversationHandler.END
    
    note_id = temp_data[user_id]["note_id"]
    new_link = update.message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not is_valid_url(new_link):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n\n"
            "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ https://example.com\n"
            "‚Ä¢ http://example.com\n"
            "‚Ä¢ https://t.me/username\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return EDIT_LINK
    
    db = context.bot_data['db']
    note = db.get_note_by_id(note_id)
    
    if not note:
        await update.message.reply_text(
            text="‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Å–ø–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return ConversationHandler.END
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    success = db.update_note(
        note_id,
        title=note.title,
        link=new_link,
        exam_type=note.exam_type,
        file_path=note.file_path
    )
    
    if not success:
        await update.message.reply_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return ConversationHandler.END
    
    await update.message.reply_text(
        text=f"‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n"
             f"üîó –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {new_link}",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")]]),
        disable_web_page_preview=True
    )
    return ConversationHandler.END

async def handle_delete_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –∏–∑ callback_data
    note_id = int(query.data.split("_")[-1])  # notes_confirm_delete_123 -> 123
    
    db = context.bot_data['db']
    note = db.get_note_by_id(note_id)
    
    if not note:
        await query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Å–ø–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return ConversationHandler.END
    
    title = note.title
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if note.file_path and os.path.exists(note.file_path):
        try:
            os.remove(note.file_path)
            logging.info(f"–§–∞–π–ª {note.file_path} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {note.file_path}: {e}")
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    success = db.delete_note(note_id)
    
    if not success:
        await query.edit_message_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return ConversationHandler.END
    
    await query.edit_message_text(
        text=f"‚úÖ –ö–æ–Ω—Å–ø–µ–∫—Ç '{title}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
        ]])
    )
    return ConversationHandler.END

async def show_notes_page(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if user_id not in temp_data or 'notes' not in temp_data[user_id]:
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="admin_back")
            ]])
        )
        return

    notes = temp_data[user_id]["notes"]
    current_page = temp_data[user_id].get("current_page", 0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    exam_type = temp_data[user_id]["exam_type"]

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    ITEMS_PER_PAGE = 5
    total_items = len(notes)
    total_pages = (total_items + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if current_page >= total_pages:
        current_page = total_pages - 1
    if current_page < 0:
        current_page = 0
    
    # –û–±–Ω–æ–≤–ª—è–µ–º current_page –≤ temp_data
    temp_data[user_id]["current_page"] = current_page

    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = current_page * ITEMS_PER_PAGE
    end_idx = min(start_idx + ITEMS_PER_PAGE, total_items)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_lines = [
        f"üìö –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ –¥–ª—è {ExamType[exam_type].value}",
        f"–í—Å–µ–≥–æ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤: {total_items}\n"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç—ã
    for i, note in enumerate(notes[start_idx:end_idx], start=1):
        file_info = "‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞"
        if note.file_path:
            file_name = os.path.basename(note.file_path)
            file_info = f"üìé –§–∞–π–ª: {file_name}"
        link = note.link if note.link else ""
        if len(link) > 50:
            link = link[:47] + "..."
        message_lines.append(f"\n{start_idx + i}. üìù {note.title}")
        if link:
            message_lines.append(f"‚îî‚îÄ <a href=\"{link}\">–°—Å—ã–ª–∫–∞</a>")
        else:
            message_lines.append("‚îî‚îÄ –°—Å—ã–ª–∫–∞: ‚Äî")
        message_lines.append(f"‚îî‚îÄ {file_info}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    if current_page > 0:
        nav_row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data="notes_page_prev"))
    nav_row.append(InlineKeyboardButton(f"{current_page+1}/{total_pages}", callback_data="noop"))
    if current_page < total_pages - 1:
        nav_row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data="notes_page_next"))
    if len(nav_row) > 1:
        keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="admin_back")])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_text = "\n".join(message_lines)
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        await query.edit_message_text(
            text=message_text,
            reply_markup=reply_markup,
            disable_web_page_preview=True,
            parse_mode='HTML'
        )
    except BadRequest as e:
        if "Message is not modified" in str(e):
            await query.answer("–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        else:
            raise e

async def handle_page_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if user_id not in temp_data or 'notes' not in temp_data[user_id]:
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return ConversationHandler.END

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    action = query.data.split("_")[-1]
    current_page = temp_data[user_id].get("current_page", 0)
    
    # –ò–∑–º–µ–Ω—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if action == "prev":
        temp_data[user_id]["current_page"] = max(0, current_page - 1)
    elif action == "next":
        total_pages = (len(temp_data[user_id]["notes"]) + 4) // 5  # 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        temp_data[user_id]["current_page"] = min(total_pages - 1, current_page + 1)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_notes_page(update, context, user_id)
    return SELECT_NOTE

async def handle_admin_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = update.effective_user.id
    if user_id in temp_data:
        del temp_data[user_id]
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await admin_menu(update, context)
    return ConversationHandler.END 