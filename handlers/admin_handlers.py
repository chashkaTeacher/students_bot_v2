from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from core.database import Database, ExamType, PendingNoteAssignment
from handlers.student_handlers import student_menu, send_student_menu_by_chat_id
import os
import uuid
import json

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ENTER_NAME, CHOOSE_EXAM, ENTER_LINK, CONFIRM_DELETE, EDIT_NAME, EDIT_EXAM, EDIT_STUDENT_LINK, ADD_NOTE = range(8)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö
student_data = {}
# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
delete_data = {}
# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
edit_data = {}
# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
temp_data = {}

GIVE_HOMEWORK_CHOOSE_EXAM, GIVE_HOMEWORK_CHOOSE_STUDENT, GIVE_HOMEWORK_CHOOSE_TASK = range(100, 103)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
GIVE_HOMEWORK_STATUS = 103

# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —à–∫–æ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
SCHOOL_HOMEWORK_CHOICE, SCHOOL_HOMEWORK_TITLE, SCHOOL_HOMEWORK_LINK, SCHOOL_HOMEWORK_FILE, SCHOOL_NOTE_CHOICE, SCHOOL_NOTE_TITLE, SCHOOL_NOTE_LINK, SCHOOL_NOTE_FILE = range(104, 112)

give_homework_temp = {}

GIVE_VARIANT_CHOOSE_EXAM, GIVE_VARIANT_ENTER_LINK = 200, 201

give_variant_temp = {}

# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
STATISTICS_CHOOSE_EXAM, STATISTICS_CHOOSE_STUDENT = 2000, 2001

EDIT_TASK_STATUS = 3000

def convert_status_from_db(status):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π"""
    if status == "completed":
        return "–ü—Ä–æ–π–¥–µ–Ω–æ"
    elif status == "in_progress":
        return "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
    elif status == "not_passed":
        return "–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ"
    else:
        return status

async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE = None) -> int:
    keyboard = [
        [
            InlineKeyboardButton("üéØ –í—ã–¥–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="admin_give_homework")
        ],
        [
            InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞–º–∏", callback_data="admin_students"),
            InlineKeyboardButton("üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏", callback_data="admin_homework")
        ],
        [
            InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º–∏", callback_data="admin_notes"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if hasattr(update, 'callback_query') and update.callback_query:
        await update.callback_query.message.edit_text(
            "üîë –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "üîë –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup
        )
    return ConversationHandler.END

async def students_menu(update: Update, context: ContextTypes.DEFAULT_TYPE = None) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞–º–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞", callback_data="admin_add_student"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞", callback_data="admin_delete")
        ],
        [
            InlineKeyboardButton("‚úèÔ∏è –í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è", callback_data="admin_edit"),
            InlineKeyboardButton("üë• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É—á–µ–Ω–∏–∫–∞—Ö", callback_data="admin_students_info")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.message.edit_text(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞–º–∏\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def notes_menu(update: Update, context: ContextTypes.DEFAULT_TYPE = None) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç", callback_data="admin_add_note"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç", callback_data="admin_delete_note")
        ],
        [
            InlineKeyboardButton("üìö –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤", callback_data="admin_list_notes"),
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_edit_note")
        ],
        [
            InlineKeyboardButton("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–≤—ã–¥–∞–Ω–Ω—ã–µ", callback_data="admin_check_unassigned_notes")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.message.edit_text(
        "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞–º–∏\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def tasks_menu(update: Update, context: ContextTypes.DEFAULT_TYPE = None) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏"""
    from handlers.homework_handlers import show_homework_menu
    await show_homework_menu(update, context)

async def start_add_student(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not context.bot_data['db'].is_admin(user_id):
        await query.message.reply_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return ConversationHandler.END
    
    await query.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞:"
    )
    return ENTER_NAME

async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""
    name = update.message.text
    user_id = update.effective_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    student_data[user_id] = {"name": name}
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —ç–∫–∑–∞–º–µ–Ω–∞
    keyboard = [
        [
            InlineKeyboardButton("üìù –û–ì–≠", callback_data="student_exam_OGE"),
            InlineKeyboardButton("üìö –ï–ì–≠", callback_data="student_exam_EGE")
        ],
        [InlineKeyboardButton("üè´ –®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="student_exam_SCHOOL")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        text="üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞:",
        reply_markup=reply_markup
    )
    
    return CHOOSE_EXAM

async def choose_exam(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —ç–∫–∑–∞–º–µ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel_add":
        await admin_menu(update, context)
        return ConversationHandler.END
    
    user_id = query.from_user.id
    exam_type = query.data.split("_")[-1]  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞ (OGE/EGE/SCHOOL)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞
    student_data[user_id]["exam_type"] = ExamType[exam_type]
    
    await query.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add")
        ]])
    )
    return ENTER_LINK

async def enter_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ"""
    link = update.message.text.strip()
    user_id = update.effective_user.id
    
    if user_id not in student_data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await admin_menu(update, context)
        return ConversationHandler.END
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    from core.database import is_valid_url
    if not is_valid_url(link):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n\n"
            "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ https://example.com\n"
            "‚Ä¢ http://example.com\n"
            "‚Ä¢ https://t.me/username\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return ENTER_LINK
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    student_info = student_data[user_id]
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        student_data_dict = context.bot_data['db'].create_student(
            name=student_info["name"],
            exam_type=student_info["exam_type"],
            lesson_link=link
        )
        
        await update.message.reply_text(
            f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üë§ –ò–º—è: {student_data_dict['name']}\n"
            f"üìö –≠–∫–∑–∞–º–µ–Ω: {student_data_dict['exam_type']}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {student_data_dict['lesson_link']}\n"
            f"üîë –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞: `{student_data_dict['password']}`",
            parse_mode='Markdown'
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del student_data[user_id]
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await admin_menu(update, context)
        
        return ConversationHandler.END
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        if user_id in student_data:
            del student_data[user_id]
        await admin_menu(update, context)
        return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    user_id = update.effective_user.id
    if user_id in student_data:
        del student_data[user_id]
    
    await update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await admin_menu(update, context)
    
    return ConversationHandler.END

async def handle_admin_actions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception as e:
        pass
    
    if query.data == "admin_stats":
        return await show_statistics_menu(update, context)
    
    if query.data.startswith("edit_name_"):
        student_id = int(query.data.split("_")[-1])
        temp_data[update.effective_user.id] = {"student_id": student_id}
        
        db = context.bot_data['db']
        student = db.get_student_by_id(student_id)
        
        await query.edit_message_text(
            text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞:\n–¢–µ–∫—É—â–µ–µ –∏–º—è: {student.name}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
            ]])
        )
        return EDIT_NAME
        
    elif query.data.startswith("edit_link_"):
        student_id = int(query.data.split("_")[-1])
        temp_data[update.effective_user.id] = {"student_id": student_id}
        
        db = context.bot_data['db']
        student = db.get_student_by_id(student_id)
        
        await query.edit_message_text(
            text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —É—á–µ–Ω–∏–∫–∞:\n–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞: {student.lesson_link}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
            ]])
        )
        return EDIT_STUDENT_LINK

    if not context.bot_data['db'].is_admin(query.from_user.id):
        await query.message.edit_text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return ConversationHandler.END

    if query.data == "admin_students":
        await students_menu(update, context)
        return ConversationHandler.END
    elif query.data == "admin_give_homework":
        await give_homework_menu(update, context)
        return ConversationHandler.END
    elif query.data == "admin_give_homework_task":
        from handlers.homework_handlers import show_homework_menu
        await show_homework_menu(update, context)
        return ConversationHandler.END
    elif query.data == "admin_give_homework_variant":
        await handle_give_homework_variant(update, context)
        return ConversationHandler.END
    elif query.data == "admin_notes":
        await notes_menu(update, context)
        return ConversationHandler.END
    elif query.data == "admin_check_unassigned_notes":
        await check_unassigned_notes(update, context)
        return ConversationHandler.END
    elif query.data == "admin_homework":
        from handlers.homework_handlers import show_homework_menu
        await show_homework_menu(update, context)
        return ConversationHandler.END
    elif query.data == "admin_stats":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
    elif query.data == "admin_students_info":
        keyboard = [
            [
                InlineKeyboardButton("–û–ì–≠", callback_data="info_type_OGE"),
                InlineKeyboardButton("–ï–ì–≠", callback_data="info_type_EGE")
            ],
            [
                InlineKeyboardButton("–®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="info_type_SCHOOL")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_students")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
    elif query.data.startswith("info_type_"):
        exam_type = query.data.split("_")[2]
        students = context.bot_data['db'].get_students_by_exam_type(ExamType[exam_type])
        
        if not students:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_students_info")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(
                f"‚ùå –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Å–¥–∞—é—â–∏—Ö {ExamType[exam_type].value}!",
                reply_markup=reply_markup
            )
            return ConversationHandler.END
        
        keyboard = []
        for i in range(0, len(students), 2):
            row = []
            for j in range(2):
                if i + j < len(students):
                    student = students[i + j]
                    note_text = f" ({student.notes})" if student.notes else ""
                    row.append(InlineKeyboardButton(
                        f"üë§ {student.name}{note_text}",
                        callback_data=f"student_info_{student.id}"
                    ))
            keyboard.append(row)
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_students_info")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            f"üìö –°—Ç—É–¥–µ–Ω—Ç—ã, —Å–¥–∞—é—â–∏–µ {ExamType[exam_type].value}:\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
        
    elif query.data.startswith("student_info_"):
        student_id = int(query.data.split("_")[2])
        student = context.bot_data['db'].get_student_by_id(student_id)
        
        if not student:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_students_info")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(
                "‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                reply_markup=reply_markup
            )
            return ConversationHandler.END
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"info_type_{student.exam_type.name}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        name = student.name or '‚Äî'
        exam = student.exam_type.value if student.exam_type else '‚Äî'
        telegram_id = student.telegram_id or '‚Äî'
        password = student.password or '‚Äî'
        lesson_link = student.lesson_link or ''
        lesson_link_block = f'<a href="{lesson_link}">–°—Å—ã–ª–∫–∞</a>' if lesson_link else '‚Äî'
        lesson_date = getattr(student, 'lesson_date', None) or '‚Äî'
        description = getattr(student, 'description', None) or '‚Äî'

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        db = context.bot_data['db']
        homeworks = db.get_homeworks_for_student_with_filter(student.id)
        if homeworks:
            hw = homeworks[-1][0]
            hw_link = hw.link or ''
            homework_block = f'<a href="{hw_link}">–°—Å—ã–ª–∫–∞</a>' if hw_link else '‚Äî'
        else:
            homework_block = '‚Äî'

        info_text = (
            f'<b>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–Ω–∏–∫–µ</b>\n'
            f'‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n'
            f'üìù <b>–ò–º—è:</b> {name}\n'
            f'üìö <b>–≠–∫–∑–∞–º–µ–Ω:</b> {exam}\n'
            f'üÜî <b>Telegram ID:</b> {telegram_id}\n'
            f'üîë <b>–ü–∞—Ä–æ–ª—å:</b> <code>{password}</code>\n'
            f'‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n'
            f'üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ:</b> {lesson_link_block}\n'
            f'üìÖ <b>–î–∞—Ç–∞ –∑–∞–Ω—è—Ç–∏—è:</b> {lesson_date}\n'
            f'üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n'
            f'üìã <b>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:</b> {homework_block}'
        )
        await query.message.edit_text(
            info_text,
            reply_markup=reply_markup,
            parse_mode='HTML',
            disable_web_page_preview=True
        )
        return ConversationHandler.END
    elif query.data.startswith("delete_type_"):
        exam_type = query.data.split("_")[2]
        students = context.bot_data['db'].get_students_by_exam_type(ExamType[exam_type])
        
        if not students:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_delete")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(
                f"‚ùå –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Å–¥–∞—é—â–∏—Ö {ExamType[exam_type].value}!",
                reply_markup=reply_markup
            )
            return ConversationHandler.END
        
        keyboard = []
        for i in range(0, len(students), 2):
            row = []
            for j in range(2):
                if i + j < len(students):
                    student = students[i + j]
                    note_text = f" ({student.notes})" if student.notes else ""
                    row.append(InlineKeyboardButton(
                        f"‚ùå {student.name}{note_text}",
                        callback_data=f"delete_{student.id}"
                    ))
            keyboard.append(row)
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_delete")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            f"–°—Ç—É–¥–µ–Ω—Ç—ã, —Å–¥–∞—é—â–∏–µ {ExamType[exam_type].value}:\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
        
    elif query.data == "admin_delete":
        keyboard = [
            [
                InlineKeyboardButton("–û–ì–≠", callback_data="delete_type_OGE"),
                InlineKeyboardButton("–ï–ì–≠", callback_data="delete_type_EGE")
            ],
            [
                InlineKeyboardButton("–®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="delete_type_SCHOOL")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞:",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
        
    elif query.data.startswith("delete_"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ–º –∑–∞–º–µ—Ç–∫–∏
        if query.data.startswith("delete_note_"):
            student_id = int(query.data.split("_")[2])
            student = context.bot_data['db'].get_student_by_id(student_id)
            if student:
                if context.bot_data['db'].delete_student_note(student_id):
                    await query.answer("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
                await query.edit_message_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.name}:",
                    reply_markup=InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_name_{student_id}"),
                            InlineKeyboardButton("üìö –ò–∑–º–µ–Ω–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω", callback_data=f"edit_exam_{student_id}")
                        ],
                        [
                            InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"edit_link_{student_id}"),
                            InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"add_note_{student_id}")
                        ],
                        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_type_{student.exam_type.name}")]
                    ])
                )
            else:
                await query.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await admin_menu(update, context)
            return ConversationHandler.END
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_id = int(query.data.split("_")[1])
        student = context.bot_data['db'].get_student_by_id(student_id)
        if student:
            delete_data[query.from_user.id] = {"student_id": student_id, "exam_type": student.exam_type}
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete"),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(
                f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.name}?\n"
                f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                reply_markup=reply_markup
            )
            return CONFIRM_DELETE
        await query.message.edit_text("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        await admin_menu(update, context)
        return ConversationHandler.END
        
    elif query.data == "confirm_delete":
        if query.from_user.id in delete_data:
            student_id = delete_data[query.from_user.id]["student_id"]
            context.bot_data['db'].delete_student(student_id)
            del delete_data[query.from_user.id]
            await query.answer("‚úÖ –°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        await admin_menu(update, context)
        return ConversationHandler.END
        
    elif query.data == "cancel_delete":
        if query.from_user.id in delete_data:
            del delete_data[query.from_user.id]
            await query.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await admin_menu(update, context)
        return ConversationHandler.END
    elif query.data == "admin_back":
        await admin_menu(update, context)
        return ConversationHandler.END
    
    elif query.data == "admin_edit":
        keyboard = [
            [
                InlineKeyboardButton("–û–ì–≠", callback_data="edit_type_OGE"),
                InlineKeyboardButton("–ï–ì–≠", callback_data="edit_type_EGE")
            ],
            [
                InlineKeyboardButton("–®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="edit_type_SCHOOL")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞:",
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    elif query.data.startswith("edit_type_"):
        exam_type = query.data.split("_")[2]
        students = context.bot_data['db'].get_students_by_exam_type(ExamType[exam_type])
        
        if not students:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_edit")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(
                f"‚ùå –ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, —Å–¥–∞—é—â–∏—Ö {ExamType[exam_type].value}!",
                reply_markup=reply_markup
            )
            return ConversationHandler.END
        
        keyboard = []
        for i in range(0, len(students), 2):
            row = []
            for j in range(2):
                if i + j < len(students):
                    student = students[i + j]
                    note_text = f" ({student.notes})" if student.notes else ""
                    row.append(InlineKeyboardButton(
                        f"‚úèÔ∏è {student.name}{note_text}",
                        callback_data=f"edit_student_{student.id}"
                    ))
            keyboard.append(row)
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_edit")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            f"–°—Ç—É–¥–µ–Ω—Ç—ã, —Å–¥–∞—é—â–∏–µ {ExamType[exam_type].value}:\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    elif query.data.startswith("edit_student_"):
        student_id = int(query.data.split("_")[2])
        student = context.bot_data['db'].get_student_by_id(student_id)
        
        if not student:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_edit")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_text(
                "‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                reply_markup=reply_markup
            )
            return ConversationHandler.END
        
        keyboard = [
            [
                InlineKeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_name_{student_id}"),
                InlineKeyboardButton("üìö –ò–∑–º–µ–Ω–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω", callback_data=f"edit_exam_{student_id}")
            ],
            [
                InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"edit_link_{student_id}"),
                InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"add_note_{student_id}")
            ],
            [
                InlineKeyboardButton("üó∫Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è", callback_data=f"edit_task_status_{student_id}")
            ]
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if student.notes:
            keyboard.append([
                InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"delete_note_{student_id}")
            ])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_type_{student.exam_type.name}")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.name}:",
            reply_markup=reply_markup
        )
        return ConversationHandler.END

    elif query.data.startswith("edit_exam_"):
        student_id = int(query.data.split("_")[2])
        student = context.bot_data['db'].get_student_by_id(student_id)
        if student:
            edit_data[query.from_user.id] = {"student_id": student_id, "type": "exam"}
            await show_exam_buttons_edit(update, student_id)
            return EDIT_EXAM
        await admin_menu(update, context)
        return ConversationHandler.END

    elif query.data.startswith("add_note_"):
        student_id = int(query.data.split("_")[2])
        student = context.bot_data['db'].get_student_by_id(student_id)
        if student:
            edit_data[query.from_user.id] = {"student_id": student_id, "type": "note"}
            await query.message.edit_text(
                f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.name}:"
            )
            return ADD_NOTE
        await admin_menu(update, context)
        return ConversationHandler.END

    elif query.data.startswith("delete_note_"):
        student_id = int(query.data.split("_")[2])
        student = context.bot_data['db'].get_student_by_id(student_id)
        if student:
            if context.bot_data['db'].delete_student_note(student_id):
                await query.answer("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
            await query.edit_message_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student.name}:",
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_name_{student_id}"),
                        InlineKeyboardButton("üìö –ò–∑–º–µ–Ω–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω", callback_data=f"edit_exam_{student_id}")
                    ],
                    [
                        InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"edit_link_{student_id}"),
                        InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"add_note_{student_id}")
                    ],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_type_{student.exam_type.name}")]
                ])
            )
        else:
            await query.answer("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await admin_menu(update, context)
        return ConversationHandler.END

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤
    elif query.data.startswith("assign_unassigned_note_"):
        note_id = int(query.data.split("_")[-1])
        db = context.bot_data['db']
        note = db.get_note_by_id(note_id)
        if not note:
            await query.edit_message_text("‚ùå –ö–æ–Ω—Å–ø–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_check_unassigned_notes")]]))
            return ConversationHandler.END
        matching_students = db.get_students_with_matching_homework(note)
        unassigned_students = [s for s in matching_students if not db.is_note_assigned_to_student(s.id, note.id)]
        if not unassigned_students:
            await query.edit_message_text("‚ùå –ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —ç—Ç–æ–≥–æ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_check_unassigned_notes")]]))
            return ConversationHandler.END
        process_id = str(uuid.uuid4())
        db.add_pending_note_assignment_with_process(process_id, update.effective_user.id, note_id=note_id, step='choose_student')
        exam_type = note.exam_type.value if hasattr(note.exam_type, 'value') else str(note.exam_type)
        student_names = ', '.join([s.name for s in unassigned_students])
        homeworks = db.get_homework_by_exam(note.exam_type)
        hw_titles = ', '.join([hw.title for hw in homeworks if note.get_task_number() == hw.get_task_number()])
        if not hw_titles:
            hw_titles = '–ù–µ—Ç —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–¥–∞–Ω–∏—è'
        message_text = (
            f"üìö <b>{note.title}</b>\n"
            f"–≠–∫–∑–∞–º–µ–Ω: <b>{exam_type}</b>\n"
            f"üîó <a href='{note.link}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç</a>\n\n"
            f"<b>–£—á–µ–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –≤—ã–¥–∞—Ç—å:</b>\n{student_names}\n\n"
            f"<b>–ü–æ–¥—Ö–æ–¥–∏—Ç –∫ –∑–∞–¥–∞–Ω–∏—è–º:</b>\n{hw_titles}"
        )
        keyboard = []
        for i in range(0, len(unassigned_students), 2):
            row = []
            for j in range(2):
                if i + j < len(unassigned_students):
                    student = unassigned_students[i + j]
                    row.append(InlineKeyboardButton(student.name, callback_data=f"assign_note_to_student_{process_id}_{student.id}"))
            keyboard.append(row)
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_check_unassigned_notes")])
        await query.edit_message_text(
            message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML',
            disable_web_page_preview=False
        )
        return ConversationHandler.END

    elif query.data.startswith("assign_note_to_student_"):
        parts = query.data.split("_")
        process_id = parts[-2]
        student_id = int(parts[-1])
        user_id = update.effective_user.id
        db = context.bot_data['db']
        db.update_pending_note_assignment(process_id, student_id=student_id, step='choose_note')
        pending = db.get_pending_note_assignment_by_process(process_id)
        note_id = pending.note_id
        exam_type = db.get_student_by_id(student_id).exam_type
        available_notes = db.get_notes_by_exam(exam_type)
        if not available_notes:
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —ç–∫–∑–∞–º–µ–Ω–∞", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_check_unassigned_notes")]]))
            db.delete_pending_note_assignment_by_process(process_id)
            return ConversationHandler.END
        keyboard = []
        for i in range(0, len(available_notes), 2):
            row = []
            for j in range(2):
                if i + j < len(available_notes):
                    note = available_notes[i + j]
                    is_assigned = db.is_note_assigned_to_student(student_id, note.id)
                    prefix = "‚úÖ" if is_assigned else "üìö"
                    row.append(InlineKeyboardButton(f"{prefix} {note.title}", callback_data=f"assign_note_{note.id}_{process_id}"))
            keyboard.append(row)
        keyboard.append([InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –∏–∑ –≤—Å–µ—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤", callback_data=f"manual_select_notes_{process_id}")])
        keyboard.append([InlineKeyboardButton("‚ùå –ù–µ –≤—ã–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç", callback_data=f"skip_note_assignment_{process_id}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_check_unassigned_notes")])
        student = db.get_student_by_id(student_id)
        await query.edit_message_text(f"üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Å–ø–µ–∫—Ç –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {student.name}:\n‚úÖ - —É–∂–µ –≤—ã–¥–∞–Ω\nüìö - –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—ã–¥–∞—á–∏", reply_markup=InlineKeyboardMarkup(keyboard))
        return ConversationHandler.END

    elif query.data.startswith("assign_note_"):
        parts = query.data.split("_")
        note_id = int(parts[2])
        process_id = parts[3]
        user_id = update.effective_user.id
        db = context.bot_data['db']
        pending = db.get_pending_note_assignment_by_process(process_id)
        if pending:
            student_id = pending.student_id
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_check_unassigned_notes")]]))
            return ConversationHandler.END
        success = db.assign_note_to_student(student_id, note_id)
        if success:
            note = db.get_note_by_id(note_id)
            student = db.get_student_by_id(student_id)
            await query.edit_message_text(f"‚úÖ –ö–æ–Ω—Å–ø–µ–∫—Ç '{note.title}' —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω —É—á–µ–Ω–∏–∫—É {student.name}!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_check_unassigned_notes")]]))
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_check_unassigned_notes")]]))
        db.delete_pending_note_assignment_by_process(process_id)
        return ConversationHandler.END

    elif query.data.startswith("manual_select_notes_"):
        process_id = query.data.split("_")[-1]
        user_id = update.effective_user.id
        db = context.bot_data['db']
        pending = db.get_pending_note_assignment_by_process(process_id)
        if not pending:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_check_unassigned_notes")]]))
            return ConversationHandler.END
        student_id = pending.student_id
        exam_type = db.get_student_by_id(student_id).exam_type
        available_notes = db.get_notes_by_exam(exam_type)
        if not available_notes:
            back_cb = "admin_give_homework" if pending.origin == 'give_homework' else "admin_check_unassigned_notes"
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —ç–∫–∑–∞–º–µ–Ω–∞", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_cb)]]))
            db.delete_pending_note_assignment_by_process(process_id)
            return ConversationHandler.END
        keyboard = []
        for i in range(0, len(available_notes), 2):
            row = []
            for j in range(2):
                if i + j < len(available_notes):
                    note = available_notes[i + j]
                    is_assigned = db.is_note_assigned_to_student(student_id, note.id)
                    prefix = "‚úÖ" if is_assigned else "üìö"
                    row.append(InlineKeyboardButton(f"{prefix} {note.title}", callback_data=f"assign_note_{note.id}_{process_id}"))
            keyboard.append(row)
        back_cb = "admin_give_homework" if pending.origin == 'give_homework' else "admin_check_unassigned_notes"
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_cb)])
        student = db.get_student_by_id(student_id)
        await query.edit_message_text(f"üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Å–ø–µ–∫—Ç –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {student.name}:\n‚úÖ - —É–∂–µ –≤—ã–¥–∞–Ω\nüìö - –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—ã–¥–∞—á–∏", reply_markup=InlineKeyboardMarkup(keyboard))
        return ConversationHandler.END

    elif query.data.startswith("skip_note_assignment_"):
        process_id = query.data.split("_")[-1]
        user_id = update.effective_user.id
        db = context.bot_data['db']
        pending = db.get_pending_note_assignment_by_process(process_id)
        db.delete_pending_note_assignment_by_process(process_id)
        back_cb = "admin_give_homework" if pending and pending.origin == 'give_homework' else "admin_check_unassigned_notes"
        await query.edit_message_text("‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–¥–∞–Ω–æ –±–µ–∑ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=back_cb)]]))
        return ConversationHandler.END

    elif query.data.startswith("assign_note_homework_"):
        # assign_note_homework_{homework_id}_{student_id}
        parts = query.data.split("_")
        homework_id = int(parts[3])
        student_id = int(parts[4])
        user_id = update.effective_user.id
        db = context.bot_data['db']
        process_id = str(uuid.uuid4())
        db.add_pending_note_assignment_with_process(process_id, user_id, student_id=student_id, step='choose_note')
        exam_type = db.get_student_by_id(student_id).exam_type
        available_notes = db.get_notes_by_exam(exam_type)
        if not available_notes:
            await query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —ç–∫–∑–∞–º–µ–Ω–∞", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")]]))
            db.delete_pending_note_assignment_by_process(process_id)
            return ConversationHandler.END
        keyboard = []
        for i in range(0, len(available_notes), 2):
            row = []
            for j in range(2):
                if i + j < len(available_notes):
                    note = available_notes[i + j]
                    is_assigned = db.is_note_assigned_to_student(student_id, note.id)
                    prefix = "‚úÖ" if is_assigned else "üìö"
                    row.append(InlineKeyboardButton(f"{prefix} {note.title}", callback_data=f"assign_note_{note.id}_{process_id}"))
            keyboard.append(row)
        keyboard.append([InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –∏–∑ –≤—Å–µ—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤", callback_data=f"manual_select_notes_{process_id}")])
        keyboard.append([InlineKeyboardButton("‚ùå –ù–µ –≤—ã–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç", callback_data=f"skip_note_assignment_{process_id}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")])
        student = db.get_student_by_id(student_id)
        await query.edit_message_text(f"üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Å–ø–µ–∫—Ç –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {student.name}:\n‚úÖ - —É–∂–µ –≤—ã–¥–∞–Ω\nüìö - –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—ã–¥–∞—á–∏", reply_markup=InlineKeyboardMarkup(keyboard))
        return ConversationHandler.END

    elif query.data.startswith("edit_task_status_"):
        parts = query.data.split("_")
        # edit_task_status_{student_id}_page_{page_num} –∏–ª–∏ edit_task_status_{student_id}
        student_id = int(parts[3])
        page = 0
        if len(parts) > 4 and parts[4] == "page":
            page = int(parts[5])
        db = context.bot_data['db']
        student = db.get_student_by_id(student_id)
        if not student:
            await query.message.edit_text("‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_edit")]]))
            return EDIT_TASK_STATUS
        if student.exam_type.value == '–ï–ì–≠':
            roadmap = [
                (1, 'üñäÔ∏è'), (4, 'üñäÔ∏è'), (11, 'üñäÔ∏èüíª'), (7, 'üñäÔ∏èüíª'), (10, 'üìù'), (3, 'üìä'), (18, 'üìä'), (22, 'üìä'),
                (9, 'üìäüíª'), ('Python', 'üêç'), (2, 'üêç'), (15, 'üêç'), (6, 'üêç'), (14, 'üêç'), (5, 'üêç'), (12, 'üêç'),
                (8, 'üêç'), (13, 'üêç'), (16, 'üêç'), (23, 'üêç'), ('19-21', 'üñäÔ∏èüíª'), (25, 'üêç'), (27, 'üêç'), (24, 'üêç'), (26, 'üìäüíª')
            ]
        elif student.exam_type.value == '–û–ì–≠':
            roadmap = [
                (1, 'üñäÔ∏è'), (2, 'üñäÔ∏è'), (4, 'üñäÔ∏è'), (9, 'üñäÔ∏è'), (7, 'üñäÔ∏è'), (8, 'üñäÔ∏è'), (10, 'üñäÔ∏è'), (5, 'üñäÔ∏è'), (3, 'üñäÔ∏è'), (6, 'üñäÔ∏è'),
                (11, 'üìÅ'), (12, 'üìÅ'), ('13.1', 'üóÇÔ∏è'), ('13.2', 'üóÇÔ∏è'), (14, 'üóÇÔ∏è'), (15, 'üêç'), ('Python', 'üêç'), (16, 'üêç')
            ]
        else:
            await query.message.edit_text("–î–ª—è —à–∫–æ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_student_{student_id}")]]))
            return EDIT_TASK_STATUS
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏–∑ –±–∞–∑—ã
        statuses = db.get_homework_status_for_student(student_id, student.exam_type)
        per_page = 8
        total = len(roadmap)
        max_page = (total + per_page - 1) // per_page - 1
        page = max(0, min(page, max_page))
        start = page * per_page
        end = start + per_page
        roadmap_page = roadmap[start:end]
        keyboard = []
        for i in range(0, len(roadmap_page), 2):
            row = []
            for j in range(2):
                if i + j < len(roadmap_page):
                    num, emoji = roadmap_page[i + j]
                    status = statuses.get(num)
                    if status is None:
                        status = statuses.get(str(num))
                    if status is None:
                        status = "–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ"
                    status = convert_status_from_db(status)
                    if status == "–ü—Ä–æ–π–¥–µ–Ω–æ":
                        status_emoji = "‚úÖ"
                    elif status == "–í –ø—Ä–æ—Ü–µ—Å—Å–µ":
                        status_emoji = "üîÑ"
                    else:
                        status_emoji = "‚ùå"
                    button_text = f"–ó–∞–¥–∞–Ω–∏–µ {num} {status_emoji}"
                    row.append(InlineKeyboardButton(button_text, callback_data=f"edit_task_select_{student_id}_{json.dumps(str(num))}_page_{page}"))
            keyboard.append(row)
        nav_row = []
        if page > 0:
            nav_row.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"edit_task_status_{student_id}_page_{page-1}"))
        nav_row.append(InlineKeyboardButton(f"{page+1}/{max_page+1}", callback_data="noop"))
        if page < max_page:
            nav_row.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"edit_task_status_{student_id}_page_{page+1}"))
        keyboard.append(nav_row)
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"edit_student_{student_id}")])
        await query.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return EDIT_TASK_STATUS

    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    return ConversationHandler.END

async def handle_edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —É—á–µ–Ω–∏–∫–∞"""
    user_id = update.effective_user.id
    if user_id not in temp_data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return ConversationHandler.END
    
    student_id = temp_data[user_id]["student_id"]
    new_name = update.message.text
    
    db = context.bot_data['db']
    db.update_student_name(student_id, new_name)
    
    await update.message.reply_text(
        f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
        ]])
    )
    return ConversationHandler.END

async def handle_edit_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ —É—á–µ–Ω–∏–∫–∞"""
    user_id = update.effective_user.id
    if user_id not in temp_data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return ConversationHandler.END
    
    student_id = temp_data[user_id]["student_id"]
    new_link = update.message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    from core.database import is_valid_url
    if not is_valid_url(new_link):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n\n"
            "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ https://example.com\n"
            "‚Ä¢ http://example.com\n"
            "‚Ä¢ https://t.me/username\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return EDIT_STUDENT_LINK
    
    db = context.bot_data['db']
    db.update_student_link(student_id, new_link)
    
    await update.message.reply_text(
        f"‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_link}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
        ]])
    )
    return ConversationHandler.END

async def handle_add_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏"""
    user_id = update.effective_user.id
    if user_id not in edit_data or edit_data[user_id]["type"] != "note":
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await admin_menu(update, context)
        return ConversationHandler.END
        
    note_text = update.message.text
    student_id = edit_data[user_id]["student_id"]
    context.bot_data['db'].add_student_note(student_id, note_text)
    
    await update.message.reply_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    del edit_data[user_id]
    
    await admin_menu(update, context)
    return ConversationHandler.END

async def show_exam_buttons_edit(update: Update, student_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —ç–∫–∑–∞–º–µ–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    keyboard = [
        [
            InlineKeyboardButton("üìù –û–ì–≠", callback_data=f"student_new_exam_OGE"),
            InlineKeyboardButton("üìö –ï–ì–≠", callback_data=f"student_new_exam_EGE")
        ],
        [InlineKeyboardButton("üè´ –®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data=f"student_new_exam_SCHOOL")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text="üìö –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞:",
            reply_markup=reply_markup
        )

async def handle_edit_exam(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —ç–∫–∑–∞–º–µ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "edit_cancel":
        await admin_menu(update, context)
        return ConversationHandler.END
    
    user_id = query.from_user.id
    if user_id not in edit_data or edit_data[user_id]["type"] != "exam":
        await query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        await admin_menu(update, context)
        return ConversationHandler.END
    
    exam_type = query.data.split("_")[-1]
    student_id = edit_data[user_id]["student_id"]
    
    try:
        old_exam_type = context.bot_data['db'].get_student_by_id(student_id).exam_type
        context.bot_data['db'].update_student_exam_type(student_id, ExamType[exam_type])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞
        if old_exam_type != ExamType[exam_type]:
            message_text = f"‚úÖ –¢–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω —Å {old_exam_type.value} –Ω–∞ {ExamType[exam_type].value}!\n\n‚ö†Ô∏è –°—Ç–∞—Ä—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã."
        else:
            message_text = "‚úÖ –¢–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!"
        
        await query.message.edit_text(message_text)
        del edit_data[user_id]
        await admin_menu(update, context)
        return ConversationHandler.END
    except Exception as e:
        await query.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–∏–ø–∞ —ç–∫–∑–∞–º–µ–Ω–∞: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        if user_id in edit_data:
            del edit_data[user_id]
        await admin_menu(update, context)
        return ConversationHandler.END

async def give_homework_menu(update: Update, context: ContextTypes.DEFAULT_TYPE = None) -> None:
    """–ú–µ–Ω—é –≤—ã–¥–∞—á–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
    keyboard = [
        [
            InlineKeyboardButton("üë§ –£—á–µ–Ω–∏–∫—É", callback_data="admin_give_homework_task"),
            InlineKeyboardButton("üìÑ –í–∞—Ä–∏–∞–Ω—Ç", callback_data="admin_give_homework_variant")
        ],
        [
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

async def handle_give_homework_variant(update: Update, context: ContextTypes.DEFAULT_TYPE = None) -> int:
    keyboard = [
        [InlineKeyboardButton("üìù –û–ì–≠", callback_data="give_variant_exam_OGE"), InlineKeyboardButton("üìö –ï–ì–≠", callback_data="give_variant_exam_EGE")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞:",
        reply_markup=reply_markup
    )
    return GIVE_VARIANT_CHOOSE_EXAM

async def handle_give_variant_choose_exam(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    exam_type = query.data.split('_')[-1]
    user_id = query.from_user.id
    give_variant_temp[user_id] = {"exam_type": exam_type}
    await query.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")]])
    )
    return GIVE_VARIANT_ENTER_LINK

async def handle_give_variant_enter_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    link = update.message.text.strip()
    user_id = update.effective_user.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    from core.database import is_valid_url
    if not is_valid_url(link):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n\n"
            "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ https://example.com\n"
            "‚Ä¢ http://example.com\n"
            "‚Ä¢ https://t.me/username\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return GIVE_VARIANT_ENTER_LINK
    
    exam_type = give_variant_temp[user_id]["exam_type"]
    db = context.bot_data['db']
    db.add_variant(ExamType[exam_type], link)
    # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º —É—á–µ–Ω–∏–∫–∞–º —ç—Ç–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –º–µ–Ω—é
    students = db.get_students_by_exam_type(ExamType[exam_type])
    for student in students:
        if student.telegram_id:
            db.add_notification(student.id, 'variant', "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!", link)
            msg = await context.bot.send_message(
                chat_id=student.telegram_id,
                text="üîî –£ –≤–∞—Å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'."
            )
            db.add_push_message(student.id, msg.message_id)
            # –ü–æ—Å–ª–µ push –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ chat_id
            await send_student_menu_by_chat_id(context, student.telegram_id)
    await update.message.reply_text(
        "‚úÖ –í–∞—Ä–∏–∞–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω –≤—Å–µ–º —É—á–µ–Ω–∏–∫–∞–º —ç—Ç–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")]])
    )
    give_variant_temp.pop(user_id, None)
    return ConversationHandler.END

async def give_homework_choose_exam(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [
            InlineKeyboardButton("üìù –û–ì–≠", callback_data="give_hw_exam_OGE"),
            InlineKeyboardButton("üìö –ï–ì–≠", callback_data="give_hw_exam_EGE")
        ],
        [InlineKeyboardButton("üè´ –®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="give_hw_exam_SCHOOL")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞:",
        reply_markup=reply_markup
    )
    return GIVE_HOMEWORK_CHOOSE_EXAM

async def give_homework_choose_student(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    exam_type = update.callback_query.data.split('_')[-1]
    user_id = update.effective_user.id
    give_homework_temp[user_id] = {"exam_type": exam_type}
    db = Database()
    students = db.get_students_by_exam_type(ExamType[exam_type])
    if not students:
        await update.callback_query.message.edit_text(
            "–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")]])
        )
        return ConversationHandler.END
    
    # –î–ª—è —à–∫–æ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞
    if exam_type == "SCHOOL":
        keyboard = []
        for i in range(0, len(students), 2):
            row = []
            for j in range(2):
                if i + j < len(students):
                    student = students[i + j]
                    row.append(InlineKeyboardButton(student.name, callback_data=f"school_hw_student_{student.id}"))
            keyboard.append(row)
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
            reply_markup=reply_markup
        )
        return GIVE_HOMEWORK_CHOOSE_STUDENT
    else:
        # –î–ª—è –û–ì–≠ –∏ –ï–ì–≠ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        keyboard = []
        for i in range(0, len(students), 2):
            row = []
            for j in range(2):
                if i + j < len(students):
                    student = students[i + j]
                    row.append(InlineKeyboardButton(student.name, callback_data=f"give_hw_student_{student.id}"))
            keyboard.append(row)
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:",
            reply_markup=reply_markup
        )
        return GIVE_HOMEWORK_CHOOSE_STUDENT

async def give_homework_choose_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    student_id = int(update.callback_query.data.split('_')[-1])
    user_id = update.effective_user.id
    give_homework_temp[user_id]["student_id"] = student_id
    db = Database()
    exam_type = give_homework_temp[user_id]["exam_type"]
    homeworks = db.get_homework_by_exam(exam_type)
    if not homeworks:
        await update.callback_query.message.edit_text(
            "–ù–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")]])
        )
        return ConversationHandler.END
    keyboard = []
    for i in range(0, len(homeworks), 2):
        row = []
        for j in range(2):
            if i + j < len(homeworks):
                hw = homeworks[i + j]
                row.append(InlineKeyboardButton(hw.title, callback_data=f"give_hw_task_{hw.id}"))
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–¥–∞—á–∏:",
        reply_markup=reply_markup
    )
    return GIVE_HOMEWORK_CHOOSE_TASK

async def give_homework_assign(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    homework_id = int(update.callback_query.data.split('_')[-1])
    user_id = update.effective_user.id
    student_id = give_homework_temp[user_id]["student_id"]
    db = Database()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ
    was_assigned = db.is_homework_assigned_to_student(student_id, homework_id)
    success = db.assign_homework_to_student(student_id, homework_id)
    
    if success:
        student = db.get_student_by_id(student_id)
        homework = db.get_homework_by_id(homework_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        give_homework_temp[user_id]["homework_id"] = homework_id
        
        if was_assigned:
            message_text = "‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–¥–∞–Ω–æ (–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è)!"
        else:
            message_text = "‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ!"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ë–î
        if student:
            notif_text = f"–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {homework.title}" if homework else "–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ!"
            db.add_notification(student.id, 'homework', notif_text, homework.link if homework else None)
            # Push —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if db.has_unread_notifications(student.id):
                try:
                    msg = await context.bot.send_message(
                        chat_id=student.telegram_id,
                        text="üîî –£ –≤–∞—Å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'."
                    )
                    db.add_push_message(student.id, msg.message_id)
                    # –ü–æ—Å–ª–µ push –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ chat_id
                    await send_student_menu_by_chat_id(context, student.telegram_id)
                except Exception as e:
                    pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞
        if homework.exam_type == ExamType.SCHOOL:
            # –î–ª—è —à–∫–æ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç—ã
            await suggest_notes_for_homework(update, context, homework, student)
            return ConversationHandler.END
        else:
            # –î–ª—è –û–ì–≠ –∏ –ï–ì–≠ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            give_homework_temp[user_id]["homework_id"] = homework_id
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ", callback_data="hw_status_completed")],
                [InlineKeyboardButton("üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ", callback_data="hw_status_in_progress")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")]
            ]
            
            await update.callback_query.message.edit_text(
                f"{message_text}\n\n"
                f"üìù –ó–∞–¥–∞–Ω–∏–µ: {homework.title}\n"
                f"üë§ –£—á–µ–Ω–∏–∫: {student.name}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return GIVE_HOMEWORK_STATUS
    
    give_homework_temp.pop(user_id, None)
    return ConversationHandler.END

async def give_homework_status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if user_id not in give_homework_temp:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")]])
        )
        return ConversationHandler.END
    
    data = give_homework_temp[user_id]
    student_id = data.get("student_id")
    homework_id = data.get("homework_id")
    
    if not student_id or not homework_id:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")]])
        )
        give_homework_temp.pop(user_id, None)
        return ConversationHandler.END
    
    db = Database()
    student = db.get_student_by_id(student_id)
    homework = db.get_homework_by_id(homework_id)
    
    if not student or not homework:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞: —É—á–µ–Ω–∏–∫ –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")]])
        )
        give_homework_temp.pop(user_id, None)
        return ConversationHandler.END
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    if query.data == "hw_status_completed":
        status = "completed"
        status_text = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ"
    elif query.data == "hw_status_in_progress":
        status = "in_progress"
        status_text = "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
    else:
        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        give_homework_temp.pop(user_id, None)
        await admin_menu(update, context)
        return ConversationHandler.END
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = db.update_homework_status(student_id, homework_id, status)
    
    if success:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç—ã –¥–ª—è –≤—ã–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –û–ì–≠ –∏ –ï–ì–≠)
        await suggest_notes_for_homework(update, context, homework, student)
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        give_homework_temp.pop(user_id, None)
        return ConversationHandler.END
    else:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")]])
        )
        give_homework_temp.pop(user_id, None)
        return ConversationHandler.END

async def suggest_notes_for_homework(update: Update, context: ContextTypes.DEFAULT_TYPE, homework, student):
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–æ–Ω—Å–ø–µ–∫—Ç—ã –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    db = context.bot_data['db']
    process_id = str(uuid.uuid4())
    db.add_pending_note_assignment_with_process(process_id, update.effective_user.id, student_id=student.id, step='choose_note', origin='give_homework')

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç—ã —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞ —ç–∫–∑–∞–º–µ–Ω–∞
    available_notes = db.get_notes_by_exam(homework.exam_type)

    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã
    exact_matches = []
    keyword_matches = []

    for note in available_notes:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–¥–∞–Ω –ª–∏ —É–∂–µ –∫–æ–Ω—Å–ø–µ–∫—Ç —É—á–µ–Ω–∏–∫—É
        if db.is_note_assigned_to_student(student.id, note.id):
            continue
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É
        hw_number = homework.get_task_number()
        note_number = note.get_task_number()
        if hw_number == note_number and hw_number != float('inf'):
            exact_matches.append(note)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            hw_keywords = db._extract_keywords(homework.title)
            note_keywords = db._extract_keywords(note.title)
            similarity = db._calculate_similarity(hw_keywords, note_keywords)
            if similarity > 0.7:  # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ 70%
                keyword_matches.append(note)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []

    if exact_matches:
        keyboard.append([InlineKeyboardButton(
            f"‚úÖ {exact_matches[0].title}",
            callback_data=f"assign_note_{exact_matches[0].id}_{process_id}"
        )])

    if keyword_matches:
        for note in keyword_matches[:2]:  # –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            keyboard.append([InlineKeyboardButton(
                f"üîç {note.title}",
                callback_data=f"assign_note_{note.id}_{process_id}"
            )])

    keyboard.append([InlineKeyboardButton(
        "üìã –í—ã–±—Ä–∞—Ç—å –∏–∑ –≤—Å–µ—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤",
        callback_data=f"manual_select_notes_{process_id}"
    )])

    keyboard.append([InlineKeyboardButton(
        "‚ùå –ù–µ –≤—ã–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç",
        callback_data=f"skip_note_assignment_{process_id}"
    )])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ '{homework.title}' –≤—ã–¥–∞–Ω–æ —É—á–µ–Ω–∏–∫—É {student.name}!\n\n"

    if exact_matches:
        message_text += f"üìö –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç:\n"
    elif keyword_matches:
        message_text += f"üîç –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã:\n"
    else:
        message_text += f"üìö –•–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é?\n"

    message_text += f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await update.callback_query.message.edit_text(
        message_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def check_unassigned_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–≤—ã–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Ö –≤—ã–¥–∞—Ç—å —É—á–µ–Ω–∏–∫–∞–º"""
    db = context.bot_data['db']
    unassigned = db.get_unassigned_notes_for_students()
    
    if not unassigned:
        await update.callback_query.edit_message_text(
            "‚úÖ –í—Å–µ –∫–æ–Ω—Å–ø–µ–∫—Ç—ã –≤—ã–¥–∞–Ω—ã —É—á–µ–Ω–∏–∫–∞–º!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_notes")
            ]])
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–≤—ã–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤
    keyboard = []
    for note, student_count in unassigned[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        keyboard.append([InlineKeyboardButton(
            f"üìö {note.title} ({student_count} —É—á–µ–Ω–∏–∫–æ–≤)", 
            callback_data=f"assign_unassigned_note_{note.id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_notes")])
    
    await update.callback_query.edit_message_text(
        f"üîç –ù–∞–π–¥–µ–Ω–æ {len(unassigned)} –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–¥–∞—Ç—å —É—á–µ–Ω–∏–∫–∞–º:\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Å–ø–µ–∫—Ç –¥–ª—è –≤—ã–¥–∞—á–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    return ConversationHandler.END

async def school_homework_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —à–∫–æ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    student_id = int(update.callback_query.data.split('_')[-1])
    user_id = update.effective_user.id
    give_homework_temp[user_id]["student_id"] = student_id
    
    db = Database()
    exam_type = give_homework_temp[user_id]["exam_type"]
    homeworks = db.get_homework_by_exam(exam_type)
    
    keyboard = []
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
    if homeworks:
        keyboard.append([InlineKeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π", callback_data="school_existing_homework")])
    
    keyboard.append([InlineKeyboardButton("üìù –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data="school_new_homework")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–¥–∞—á–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
        reply_markup=reply_markup
    )
    return SCHOOL_HOMEWORK_CHOICE

async def school_existing_homework(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —à–∫–æ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    user_id = update.effective_user.id
    db = Database()
    exam_type = give_homework_temp[user_id]["exam_type"]
    homeworks = db.get_homework_by_exam(exam_type)
    
    keyboard = []
    for i in range(0, len(homeworks), 2):
        row = []
        for j in range(2):
            if i + j < len(homeworks):
                hw = homeworks[i + j]
                row.append(InlineKeyboardButton(hw.title, callback_data=f"give_hw_task_{hw.id}"))
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_give_homework")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–¥–∞—á–∏:",
        reply_markup=reply_markup
    )
    return GIVE_HOMEWORK_CHOOSE_TASK

async def school_new_homework_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    await update.callback_query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:"
    )
    return SCHOOL_HOMEWORK_TITLE

async def school_homework_title_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    title = update.message.text
    user_id = update.effective_user.id
    give_homework_temp[user_id]["title"] = title
    
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:"
    )
    return SCHOOL_HOMEWORK_LINK

async def school_homework_link_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    link = update.message.text.strip()
    user_id = update.effective_user.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    from core.database import is_valid_url
    if not is_valid_url(link):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n\n"
            "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ https://example.com\n"
            "‚Ä¢ http://example.com\n"
            "‚Ä¢ https://t.me/username\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return SCHOOL_HOMEWORK_LINK
    
    give_homework_temp[user_id]["link"] = link
    
    keyboard = [
        [InlineKeyboardButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data="school_homework_file")],
        [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="school_homework_no_file")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é?",
        reply_markup=reply_markup
    )
    return SCHOOL_HOMEWORK_FILE

async def school_homework_file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id

    # –ï—Å–ª–∏ —ç—Ç–æ callback-–∫–Ω–æ–ø–∫–∞ ‚Äî –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
    if hasattr(update, "callback_query") and update.callback_query:
        await update.callback_query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        return SCHOOL_HOMEWORK_FILE

    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
    if hasattr(update, "message") and update.message and update.message.document:
        file = await context.bot.get_file(update.message.document.file_id)
        file_name = update.message.document.file_name
        file_path = os.path.join("homework_files", file_name)
        os.makedirs("homework_files", exist_ok=True)
        await file.download_to_drive(file_path)
        give_homework_temp[user_id]["file_path"] = file_path
        await update.message.reply_text("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        return await create_school_homework(update, context)

    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    if hasattr(update, "message") and update.message:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
    return SCHOOL_HOMEWORK_FILE

async def school_homework_no_file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    give_homework_temp[user_id]["file_path"] = None
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    return await create_school_homework(update, context)

async def create_school_homework(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    db = Database()
    title = give_homework_temp[user_id]["title"]
    link = give_homework_temp[user_id]["link"]
    file_path = give_homework_temp[user_id].get("file_path")
    student_id = give_homework_temp[user_id]["student_id"]
    success = db.add_homework(title, link, ExamType.SCHOOL, file_path)
    if success:
        homeworks = db.get_homework_by_exam(ExamType.SCHOOL)
        homework = next((hw for hw in homeworks if hw.title == title and hw.link == link), None)
        if homework:
            db.assign_homework_to_student(student_id, homework.id)
            student = db.get_student_by_id(student_id)
            
            if student:
                notif_text = f"–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: {homework.title}"
                db.add_notification(student.id, 'homework', notif_text, homework.link)
                if db.has_unread_notifications(student.id):
                    try:
                        msg = await context.bot.send_message(
                            chat_id=student.telegram_id,
                            text="üîî –£ –≤–∞—Å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'."
                        )
                        db.add_push_message(student.id, msg.message_id)
                        # –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –¥–ª—è —à–∫–æ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
                        # await send_student_menu_by_chat_id(context, student.telegram_id)
                    except Exception as e:
                        pass
            
            # –î–ª—è —à–∫–æ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç
            return await suggest_school_note_creation(update, context, homework, student)
        else:
            if hasattr(update, "message") and update.message:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
            elif hasattr(update, "callback_query") and update.callback_query:
                await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
            return ConversationHandler.END
    else:
        if hasattr(update, "message") and update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
        elif hasattr(update, "callback_query") and update.callback_query:
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
        return ConversationHandler.END
    give_homework_temp.pop(user_id, None)

async def suggest_school_note_creation(update: Update, context: ContextTypes.DEFAULT_TYPE, homework, student) -> int:
    """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç –¥–ª—è —à–∫–æ–ª—å–Ω–æ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    keyboard = [
        [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç", callback_data="school_create_note")],
        [InlineKeyboardButton("‚ùå –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å", callback_data="school_no_note")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ '{homework.title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –≤—ã–¥–∞–Ω–æ —É—á–µ–Ω–∏–∫—É {student.name}!\n\n"
            f"–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é?",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ '{homework.title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ –≤—ã–¥–∞–Ω–æ —É—á–µ–Ω–∏–∫—É {student.name}!\n\n"
            f"–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Å–ø–µ–∫—Ç –∫ —ç—Ç–æ–º—É –∑–∞–¥–∞–Ω–∏—é?",
            reply_markup=reply_markup
        )
    return SCHOOL_NOTE_CHOICE

async def school_note_creation_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Å–ø–µ–∫—Ç–∞"""
    query = update.callback_query
    
    if query.data == "school_create_note":
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞:")
        return SCHOOL_NOTE_TITLE
    else:
        await query.message.edit_text("‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–¥–∞–Ω–æ –±–µ–∑ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞!")
        await admin_menu(update, context)
        return ConversationHandler.END

async def school_note_title_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞"""
    title = update.message.text
    user_id = update.effective_user.id
    give_homework_temp[user_id]["note_title"] = title
    
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç:")
    return SCHOOL_NOTE_LINK

async def school_note_link_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç"""
    link = update.message.text.strip()
    user_id = update.effective_user.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    from core.database import is_valid_url
    if not is_valid_url(link):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n\n"
            "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚Ä¢ https://example.com\n"
            "‚Ä¢ http://example.com\n"
            "‚Ä¢ https://t.me/username\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return SCHOOL_NOTE_LINK
    
    give_homework_temp[user_id]["note_link"] = link
    
    keyboard = [
        [InlineKeyboardButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data="school_note_file")],
        [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="school_note_no_file")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∫ –∫–æ–Ω—Å–ø–µ–∫—Ç—É?",
        reply_markup=reply_markup
    )
    return SCHOOL_NOTE_FILE

async def school_note_file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id

    # –ï—Å–ª–∏ —ç—Ç–æ callback-–∫–Ω–æ–ø–∫–∞ ‚Äî –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
    if hasattr(update, "callback_query") and update.callback_query:
        await update.callback_query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        return SCHOOL_NOTE_FILE

    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º
    if hasattr(update, "message") and update.message and update.message.document:
        file = await context.bot.get_file(update.message.document.file_id)
        file_name = update.message.document.file_name
        file_path = os.path.join("notes_files", file_name)
        os.makedirs("notes_files", exist_ok=True)
        await file.download_to_drive(file_path)
        give_homework_temp[user_id]["note_file_path"] = file_path
        await update.message.reply_text("‚úÖ –§–∞–π–ª –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        return await create_school_note(update, context)

    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    if hasattr(update, "message") and update.message:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
    return SCHOOL_NOTE_FILE

async def school_note_no_file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞"""
    user_id = update.effective_user.id
    give_homework_temp[user_id]["note_file_path"] = None
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç
    return await create_school_note(update, context)

async def create_school_note(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Å–ø–µ–∫—Ç –¥–ª—è —à–∫–æ–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    user_id = update.effective_user.id
    db = Database()
    
    title = give_homework_temp[user_id]["note_title"]
    link = give_homework_temp[user_id]["note_link"]
    file_path = give_homework_temp[user_id].get("note_file_path")
    student_id = give_homework_temp[user_id]["student_id"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç
    success = db.add_note(title, link, ExamType.SCHOOL, file_path)
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Å–ø–µ–∫—Ç
        notes = db.get_notes_by_exam(ExamType.SCHOOL)
        note = next((n for n in notes if n.title == title and n.link == link), None)
        
        if note:
            # –ù–∞–∑–Ω–∞—á–∞–µ–º –∫–æ–Ω—Å–ø–µ–∫—Ç —É—á–µ–Ω–∏–∫—É
            db.assign_note_to_student(student_id, note.id)
            if hasattr(update, "message") and update.message:
                await update.message.reply_text(f"‚úÖ –ö–æ–Ω—Å–ø–µ–∫—Ç '{note.title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≤—ã–¥–∞–Ω —É—á–µ–Ω–∏–∫—É!")
            elif hasattr(update, "callback_query") and update.callback_query:
                await update.callback_query.edit_message_text(f"‚úÖ –ö–æ–Ω—Å–ø–µ–∫—Ç '{note.title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≤—ã–¥–∞–Ω —É—á–µ–Ω–∏–∫—É!")
            await admin_menu(update, context)
        else:
            if hasattr(update, "message") and update.message:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞")
            elif hasattr(update, "callback_query") and update.callback_query:
                await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞")
            await admin_menu(update, context)
    else:
        if hasattr(update, "message") and update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞")
        elif hasattr(update, "callback_query") and update.callback_query:
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞")
        await admin_menu(update, context)
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    give_homework_temp.pop(user_id, None)
    return ConversationHandler.END

# --- –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

async def show_statistics_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("–û–ì–≠", callback_data="statistics_exam_OGE"),
         InlineKeyboardButton("–ï–ì–≠", callback_data="statistics_exam_EGE")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–∞–º–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=reply_markup)
    return STATISTICS_CHOOSE_EXAM

async def handle_statistics_exam_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == "statistics_exam_back":
        return await show_statistics_menu(update, context)
    exam_type = query.data.split('_')[-1]
    context.user_data['statistics_exam'] = exam_type
    db = context.bot_data['db']
    students = db.get_students_by_exam_type(ExamType[exam_type])
    if not students:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="statistics_exam_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text("–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞.", reply_markup=reply_markup)
        return STATISTICS_CHOOSE_EXAM
    keyboard = []
    row = []
    for i, student in enumerate(students, 1):
        row.append(InlineKeyboardButton(student.name, callback_data=f"statistics_student_{student.id}"))
        if i % 2 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="statistics_back")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:", reply_markup=reply_markup)
    return STATISTICS_CHOOSE_STUDENT

async def handle_statistics_student_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    student_id = int(query.data.split('_')[-1]) if 'statistics_student_' in query.data else context.user_data.get('statistics_student_id')
    db = context.bot_data['db']
    student = db.get_student_by_id(student_id)
    exam_type = context.user_data.get('statistics_exam', 'EGE')
    exam_label = '–ï–ì–≠' if exam_type == 'EGE' else '–û–ì–≠'
    page = 0
    if 'statistics_page_' in query.data:
        page = int(query.data.split('_')[-1])
    context.user_data['statistics_student_id'] = student_id
    context.user_data['statistics_page'] = page

    # --- –§–ò–ö–°: –µ—Å–ª–∏ –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —ç–∫–∑–∞–º–µ–Ω–∞ ---
    if not student_id or not exam_type or not student:
        await show_statistics_menu(update, context)
        return STATISTICS_CHOOSE_EXAM

    if exam_type == 'EGE':
        roadmap = [
            (1, 'üñäÔ∏è'), (4, 'üñäÔ∏è'), (11, 'üñäÔ∏èüíª'), (7, 'üñäÔ∏èüíª'), (10, 'üìù'), (3, 'üìä'), (18, 'üìä'), (22, 'üìä'),
            (9, 'üìäüíª'), ('Python', 'üêç'), (2, 'üêç'), (15, 'üêç'), (6, 'üêç'), (14, 'üêç'), (5, 'üêç'), (12, 'üêç'),
            (8, 'üêç'), (13, 'üêç'), (16, 'üêç'), (23, 'üêç'), ('19-21', 'üñäÔ∏èüíª'), (25, 'üêç'), (27, 'üêç'), (24, 'üêç'), (26, 'üìäüíª')
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        real_statuses = db.get_homework_status_for_student(student.id, ExamType.EGE)
        
        tasks = []
        primary_score = 0
        for idx, (num, emoji) in enumerate(roadmap, 1):
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º "–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            status = real_statuses.get(num)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏–∑ –±–∞–∑—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
            if status == 'completed' or status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                status = '–ü—Ä–æ–π–¥–µ–Ω–æ'
            elif status == 'in_progress' or status == '–í –ø—Ä–æ—Ü–µ—Å—Å–µ':
                status = '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'
            else:
                status = '–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ'
            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
            note_line = ''
            if status in ('–ü—Ä–æ–π–¥–µ–Ω–æ', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'):
                notes = db.get_notes_by_exam(ExamType.EGE)
                note = next((n for n in notes if n.get_task_number() == num), None)
                if note:
                    note_line = f"‚îî‚îÄ <a href='{note.link}'>–ö–æ–Ω—Å–ø–µ–∫—Ç</a>"
            if num in (26, 27):
                max_score = 2
            elif isinstance(num, int) and 1 <= num <= 25:
                max_score = 1
            else:
                max_score = 0
            if num == 'Python' or num == '19-21':
                title = f"{emoji} {num}"
            else:
                title = f"{emoji} –ó–∞–¥–∞–Ω–∏–µ {num}"
            if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                primary_score += max_score
                status_emoji = '‚úÖ'
            elif status == '–í –ø—Ä–æ—Ü–µ—Å—Å–µ':
                status_emoji = 'üîÑ'
            else:
                status_emoji = '‚ùå'
            status_text = f'{status} {status_emoji}'
            task_block = f"{title}\n"
            if note_line:
                task_block += note_line + "\n"
            task_block += f"‚îî‚îÄ –°—Ç–∞—Ç—É—Å: {status_text}"
            tasks.append(task_block)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –≤ —Ç–µ—Å—Ç–æ–≤—ã–µ
        primary_to_test = {
            1: 7, 2: 14, 3: 20, 4: 27, 5: 34, 6: 40, 7: 43, 8: 46, 9: 48, 10: 51, 11: 54, 12: 56, 13: 59, 14: 62, 15: 64, 16: 67, 17: 70, 18: 72, 19: 75, 20: 78, 21: 80, 22: 83, 23: 85, 24: 88, 25: 90, 26: 93, 27: 95, 28: 98, 29: 100
        }
        test_score = primary_to_test.get(primary_score, 0)
        per_page = 5
        total_pages = (len(tasks) - 1) // per_page + 1
        start = page * per_page
        end = start + per_page
        page_tasks = tasks[start:end]
        tasks_text = "\n\n".join(page_tasks)
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"statistics_page_{page-1}"))
        nav_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="noop"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"statistics_page_{page+1}"))
        progress_text = (
            f"<b>–ü—Ä–æ–≥—Ä–µ—Å—Å —É—á–µ–Ω–∏–∫–∞ {student.name} ({exam_label}):</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"<b>üèÖ –ü–µ—Ä–≤–∏—á–Ω—ã–π –±–∞–ª–ª: {primary_score}</b>\n"
            f"<b>üéØ –¢–µ—Å—Ç–æ–≤—ã–π –±–∞–ª–ª: {test_score}</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"{tasks_text}"
        )
    elif exam_type == 'OGE':
        roadmap = [
            (1, 'üñäÔ∏è'), (2, 'üñäÔ∏è'), (4, 'üñäÔ∏è'), (9, 'üñäÔ∏è'), (7, 'üñäÔ∏è'), (8, 'üñäÔ∏è'), (10, 'üñäÔ∏è'), (5, 'üñäÔ∏è'), (3, 'üñäÔ∏è'), (6, 'üñäÔ∏è'),
            (11, 'üìÅ'), (12, 'üìÅ'), ('13.1', 'üóÇÔ∏è'), ('13.2', 'üóÇÔ∏è'), (14, 'üóÇÔ∏è'), (15, 'üêç'), ('Python', 'üêç'), (16, 'üêç')
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        real_statuses = db.get_homework_status_for_student(student.id, ExamType.OGE)
        
        tasks = []
        score = 0
        passed_13 = False
        for num, emoji in roadmap:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º "–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            status = real_statuses.get(num)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏–∑ –±–∞–∑—ã –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
            if status == 'completed' or status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                status = '–ü—Ä–æ–π–¥–µ–Ω–æ'
            elif status == 'in_progress' or status == '–í –ø—Ä–æ—Ü–µ—Å—Å–µ':
                status = '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'
            else:
                status = '–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ'
            # –ü–æ–∏—Å–∫ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞
            note_line = ''
            if status in ('–ü—Ä–æ–π–¥–µ–Ω–æ', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'):
                notes = db.get_notes_by_exam(ExamType.OGE)
                note = next((n for n in notes if n.get_task_number() == num), None)
                if note:
                    note_line = f"‚îî‚îÄ <a href='{note.link}'>–ö–æ–Ω—Å–ø–µ–∫—Ç</a>"
            if num == 'Python':
                title = f"{emoji} Python"
                if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                    score += 2
            elif num in ('13.1', '13.2'):
                title = f"{emoji} –ó–∞–¥–∞–Ω–∏–µ {num}"
                if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                    passed_13 = True
            elif num == 14:
                title = f"{emoji} –ó–∞–¥–∞–Ω–∏–µ {num}"
                if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                    score += 3
            elif num in (15, 16):
                title = f"{emoji} –ó–∞–¥–∞–Ω–∏–µ {num}"
                if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                    score += 2
            else:
                title = f"{emoji} –ó–∞–¥–∞–Ω–∏–µ {num}"
                if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                    score += 1
            if status == '–ü—Ä–æ–π–¥–µ–Ω–æ':
                status_emoji = '‚úÖ'
            elif status == '–í –ø—Ä–æ—Ü–µ—Å—Å–µ':
                status_emoji = 'üîÑ'
            else:
                status_emoji = '‚ùå'
            status_text = f'{status} {status_emoji}'
            task_block = f"{title}\n"
            if note_line:
                task_block += note_line + "\n"
            task_block += f"‚îî‚îÄ –°—Ç–∞—Ç—É—Å: {status_text}"
            tasks.append(task_block)
        if passed_13:
            score += 2
        per_page = 5
        total_pages = (len(tasks) - 1) // per_page + 1
        start = page * per_page
        end = start + per_page
        page_tasks = tasks[start:end]
        tasks_text = "\n\n".join(page_tasks)
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"statistics_page_{page-1}"))
        nav_buttons.append(InlineKeyboardButton(f"{page+1}/{total_pages}", callback_data="noop"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"statistics_page_{page+1}"))
        if score <= 4:
            grade = '2'
        elif score <= 10:
            grade = '3'
        elif score <= 16:
            grade = '4'
        else:
            grade = '5'
        progress_text = (
            f"<b>–ü—Ä–æ–≥—Ä–µ—Å—Å —É—á–µ–Ω–∏–∫–∞ {student.name} ({exam_label}):</b>\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"<b>üèÖ –¢–µ–∫—É—â–∏–π –±–∞–ª–ª: {score}</b>\n"
            f"<b>üìä –û—Ü–µ–Ω–∫–∞: {grade}</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"{tasks_text}"
        )
    else:
        tasks_text = "\n\n".join([f"üìù –ó–∞–¥–∞–Ω–∏–µ {i+1}\n‚îî‚îÄ –°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ" for i in range(5)])
        nav_buttons = []
    
    keyboard = []
    if nav_buttons:
        keyboard.append(nav_buttons)
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="statistics_exam_back")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.edit_text(progress_text, reply_markup=reply_markup, parse_mode='HTML', disable_web_page_preview=True)
    return STATISTICS_CHOOSE_STUDENT