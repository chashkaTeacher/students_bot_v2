from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from core.database import Database, ExamType
from telegram.error import BadRequest
from handlers.admin_handlers import admin_menu

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSE_EXAM = "CHOOSE_EXAM"
ENTER_TITLE = "ENTER_TITLE"
ENTER_LINK = "ENTER_LINK"
SELECT_HOMEWORK = "SELECT_HOMEWORK"
EDIT_TITLE = "EDIT_TITLE"
EDIT_LINK = "EDIT_LINK"
CONFIRM_DELETE = "CONFIRM_DELETE"

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
temp_data = {}

async def show_homework_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏"""
    query = update.callback_query
    if query:
        await query.answer()

    keyboard = [
        [
            InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="homework_add"),
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="homework_list")
        ],
        [
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="homework_edit"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="homework_delete")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    if query:
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=text, reply_markup=reply_markup)
    
    return ConversationHandler.END

async def show_exam_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, action: str) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —ç–∫–∑–∞–º–µ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    temp_data[user_id] = {"action": action}
    
    keyboard = [
        [
            InlineKeyboardButton("üìù –û–ì–≠", callback_data="homework_exam_OGE"),
            InlineKeyboardButton("üìö –ï–ì–≠", callback_data="homework_exam_EGE")
        ],
        [InlineKeyboardButton("üè´ –®–∫–æ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="homework_exam_SCHOOL")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    actions = {
        "add": "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
        "list": "–ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
        "edit": "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        "delete": "—É–¥–∞–ª–µ–Ω–∏—è"
    }
    
    await query.edit_message_text(
        text=f"üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞ –¥–ª—è {actions.get(action, '')} –∑–∞–¥–∞–Ω–∏–π:",
        reply_markup=reply_markup
    )
    
    return CHOOSE_EXAM

async def handle_exam_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —ç–∫–∑–∞–º–µ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    exam_type = query.data.split("_")[-1]  # –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ callback_data
    action = temp_data[user_id]["action"]
    temp_data[user_id]["exam_type"] = exam_type
    
    db = Database()
    
    if action == "add":
        await query.edit_message_text(
            text="üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]])
        )
        return ENTER_TITLE
    
    elif action in ["list", "edit", "delete"]:
        homeworks = db.get_homework_by_exam(exam_type)
        if not homeworks:
            await query.edit_message_text(
                text=f"‚ùå –ù–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è {ExamType[exam_type].value}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
                ]])
            )
            return ConversationHandler.END
        
        if action == "list":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            temp_data[user_id]["homeworks"] = homeworks
            temp_data[user_id]["current_page"] = 0
            await show_homework_page(update, context, user_id)
            return ConversationHandler.END
        
        # –î–ª—è edit –∏ delete –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        keyboard = []
        for hw in homeworks:
            icon = "‚úèÔ∏è" if action == "edit" else "‚ùå"
            keyboard.append([InlineKeyboardButton(
                f"{icon} {hw.title}", 
                callback_data=f"homework_{action}_{hw.id}"
            )])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        actions = {
            "edit": "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            "delete": "—É–¥–∞–ª–µ–Ω–∏—è"
        }
        
        await query.edit_message_text(
            text=f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è {ExamType[exam_type].value}\n"
                 f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è {actions.get(action, '')}:",
            reply_markup=reply_markup
        )
        return SELECT_HOMEWORK if action in ["edit", "delete"] else ConversationHandler.END

async def handle_homework_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    temp_data[user_id]["title"] = update.message.text
    
    await update.message.reply_text(
        text="üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
        ]])
    )
    return ENTER_LINK

async def handle_homework_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    user_id = update.effective_user.id
    data = temp_data[user_id]
    
    db = Database()
    db.add_homework(data["title"], update.message.text, data["exam_type"])
    
    await update.message.reply_text(
        text="‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
             f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
             f"üìö –≠–∫–∑–∞–º–µ–Ω: {ExamType[data['exam_type']].value}\n"
             f"üîó –°—Å—ã–ª–∫–∞: {update.message.text}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
        ]])
    )
    return ConversationHandler.END

async def handle_homework_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    action, hw_id = query.data.split("_")[1:]
    user_id = update.effective_user.id
    temp_data[user_id]["hw_id"] = int(hw_id)
    
    db = Database()
    homework = db.get_homework_by_id(int(hw_id))
    
    if action == "edit":
        keyboard = [
            [
                InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_title_{hw_id}"),
                InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"edit_link_{hw_id}")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
        await query.edit_message_text(
            text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
                 f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {homework.title}\n"
                 f"üìö –≠–∫–∑–∞–º–µ–Ω: {homework.exam_type.value}\n"
                 f"üîó –°—Å—ã–ª–∫–∞: {homework.link}\n\n"
                 f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SELECT_HOMEWORK
    
    elif action == "delete":
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{hw_id}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="admin_back")
            ]
        ]
        await query.edit_message_text(
            text=f"‚ùóÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ?\n\n"
                 f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {homework.title}\n"
                 f"üìö –≠–∫–∑–∞–º–µ–Ω: {homework.exam_type.value}\n"
                 f"üîó –°—Å—ã–ª–∫–∞: {homework.link}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return CONFIRM_DELETE

async def handle_edit_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    action = query.data.split("_")[1]
    await query.edit_message_text(
        text=f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {'–Ω–∞–∑–≤–∞–Ω–∏–µ' if action == 'title' else '—Å—Å—ã–ª–∫—É'}:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
        ]])
    )
    return EDIT_TITLE if action == "title" else EDIT_LINK

async def handle_edit_title(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    hw_id = temp_data[user_id]["hw_id"]
    
    db = Database()
    homework = db.get_homework_by_id(hw_id)
    if homework:
        db.update_homework(hw_id, title=update.message.text, link=homework.link)
    
    await update.message.reply_text(
        text=f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
             f"üìù –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {update.message.text}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
        ]])
    )
    return ConversationHandler.END

async def handle_edit_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    hw_id = temp_data[user_id]["hw_id"]
    
    db = Database()
    homework = db.get_homework_by_id(hw_id)
    if homework:
        db.update_homework(hw_id, title=homework.title, link=update.message.text)
    
    await update.message.reply_text(
        text=f"‚úÖ –°—Å—ã–ª–∫–∞ –∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n"
             f"üîó –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞: {update.message.text}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
        ]])
    )
    return ConversationHandler.END

async def handle_delete_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    hw_id = int(query.data.split("_")[2])
    db = Database()
    homework = db.get_homework_by_id(hw_id)
    title = homework.title if homework else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
    
    db.delete_homework(hw_id)
    
    await query.edit_message_text(
        text=f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!\n\n"
             f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="admin_back")
        ]])
    )
    return ConversationHandler.END

async def show_homework_page(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π"""
    query = update.callback_query
    homeworks = temp_data[user_id]["homeworks"]
    current_page = temp_data[user_id]["current_page"]
    exam_type = temp_data[user_id]["exam_type"]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items_per_page = 5
    start_idx = current_page * items_per_page
    end_idx = start_idx + items_per_page
    total_pages = (len(homeworks) + items_per_page - 1) // items_per_page
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π
    text = f"üìö –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è {ExamType[exam_type].value}\n\n"
    for i, hw in enumerate(homeworks[start_idx:end_idx], start=start_idx + 1):
        text += f"{i}. üìù {hw.title}\n   üîó {hw.link}\n\n"
    
    text += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    nav_buttons = []
    
    if current_page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="homework_page_prev"))
    if current_page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data="homework_page_next"))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="admin_back")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if query:
        await query.edit_message_text(text=text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text=text, reply_markup=reply_markup)

async def handle_page_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    action = query.data.split("_")[-1]
    
    if action == "prev":
        temp_data[user_id]["current_page"] -= 1
    elif action == "next":
        temp_data[user_id]["current_page"] += 1
    
    await show_homework_page(update, context, user_id)
    return ConversationHandler.END 